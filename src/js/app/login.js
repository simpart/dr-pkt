!function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:r})},t.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s="./src/js/init/login.js")}({"./node_modules/babel-loader/lib/index.js??ref--4!./node_modules/mofron/src/core/namesp.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4!./node_modules/mofron/src/core/namesp.js ***!
  \****************************************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * @file namespace.js\n * @author simpart\n */\nmodule.exports = {\n    comp: {},\n    layout: {},\n    event: {},\n    effect: {},\n    func: {},\n    theme: null,\n    root: new Array(),\n    debug: false\n};\n\n//# sourceURL=webpack:///./node_modules/mofron/src/core/namesp.js?./node_modules/babel-loader/lib??ref--4")},"./node_modules/babel-loader/lib/index.js??ref--4!./src/js/conf/namesp.js":
/*!***********************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4!./src/js/conf/namesp.js ***!
  \***********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\n\n/**\n * @file namesp.js\n * @brief define namespace\n */\nvar mf = __webpack_require__(/*! mofron */ "./node_modules/mofron/index.js");\nmodule.exports = {\n  root: new mf.Component(),\n  conf: {}\n};\n/* end of file */\n\n//# sourceURL=webpack:///./src/js/conf/namesp.js?./node_modules/babel-loader/lib??ref--4')},"./node_modules/expose-loader/index.js?app!./src/js/conf/namesp.js-exposed":
/*!************************************************************************!*\
  !*** ./node_modules/expose-loader?app!./src/js/conf/namesp.js-exposed ***!
  \************************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["app"] = __webpack_require__(/*! -!./node_modules/babel-loader/lib??ref--4!./namesp.js */ "./node_modules/babel-loader/lib/index.js??ref--4!./src/js/conf/namesp.js");\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))\n\n//# sourceURL=webpack:///./src/js/conf/namesp.js-exposed?./node_modules/expose-loader?app')},"./node_modules/expose-loader/index.js?mofron!./node_modules/mofron/src/core/namesp.js-exposed":
/*!********************************************************************************************!*\
  !*** ./node_modules/expose-loader?mofron!./node_modules/mofron/src/core/namesp.js-exposed ***!
  \********************************************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["mofron"] = __webpack_require__(/*! -!./node_modules/babel-loader/lib??ref--4!./namesp.js */ "./node_modules/babel-loader/lib/index.js??ref--4!./node_modules/mofron/src/core/namesp.js");\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))\n\n//# sourceURL=webpack:///./node_modules/mofron/src/core/namesp.js-exposed?./node_modules/expose-loader?mofron')},"./node_modules/mofron-comp-appbase/index.js":
/*!***************************************************!*\
  !*** ./node_modules/mofron-comp-appbase/index.js ***!
  \***************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file   mofron-comp-appbase/index.js\n * @brief  common application component for mofron\n * @author simpart\n */\nvar mf = __webpack_require__(/*! mofron */ \"./node_modules/mofron/index.js\");\nvar Header = __webpack_require__(/*! mofron-comp-apphdr */ \"./node_modules/mofron-comp-apphdr/index.js\");\n\n/**\n * @class mofron.comp.AppBase\n * @brief common application component class\n */\nmf.comp.AppBase = function (_mf$Component) {\n    _inherits(_class, _mf$Component);\n\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('AppBase');\n            _this.prmOpt(po);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    /**\n     * initialize dom contents\n     * \n     * @param prm (text, mofron-comp-Text) title\n     */\n\n\n    _createClass(_class, [{\n        key: 'initDomConts',\n        value: function initDomConts(prm) {\n            try {\n                _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'initDomConts', this).call(this);\n\n                this.addChild(this.header());\n\n                /* background */\n                var bg = new mf.Component({\n                    style: { 'position': 'fixed' },\n                    height: window.innerHeight - this.header().height()\n                });\n                this.addChild(bg);\n\n                /* contents */\n                this.addChild(this.contents());\n                this.target(this.contents().target());\n\n                /* sync height-length with window */\n                mf.func.addResizeWin(function (p) {\n                    try {\n                        bg.height(window.innerHeight - p.header().height());\n                    } catch (e) {\n                        console.error(e.stack);\n                        throw e;\n                    }\n                }, this);\n\n                if (undefined !== prm) {\n                    this.title(prm);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'addLayout',\n        value: function addLayout(lo) {\n            try {\n                return this.child()[2].addLayout(lo);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'themeConts',\n        value: function themeConts() {\n            try {\n                var hdr = this.theme().component('mofron-comp-apphdr');\n                if (null !== hdr) {\n                    this.header(hdr);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'title',\n        value: function title(ttl) {\n            try {\n                return this.header().title(ttl);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'header',\n        value: function header(hdr) {\n            try {\n                if (undefined === hdr) {\n                    /* getter */\n                    if (undefined === this.m_header) {\n                        this.header(new Header());\n                    }\n                    return this.m_header;\n                }\n                /* setter */\n                if (true !== mf.func.isInclude(hdr, 'Ttlhdr')) {\n                    throw new Error('invalid parameter');\n                }\n                hdr.url(null === hdr.url() ? './' : undefined);\n                if (true === this.target().isPushed() && undefined !== this.m_header) {\n                    this.updChild(this.header(), hdr);\n                }\n                this.m_header = hdr;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'contents',\n        value: function contents(cnt) {\n            try {\n                if (undefined === cnt) {\n                    /* getter */\n                    if (3 > this.child().length) {\n                        return new mf.Component({ width: '100%' });\n                    }\n                    return this.child()[2];\n                }\n                /* setter */\n                this.addChild(cnt);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'background',\n        value: function background(val) {\n            try {\n                if (undefined === val) {\n                    /* getter */\n                    return this.child()[1];\n                }\n                /* setter */\n                if (true !== mf.func.isInclude(val, 'Component')) {\n                    throw new Error('invalid parameter');\n                }\n                val.size('100%', '100%');\n                this.child()[1].addChild(val);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'color',\n        value: function color(clr) {\n            try {\n                if (undefined === clr) {\n                    /* getter */\n                    return this.header().color();\n                }\n                /* setter */\n                /* set header color */\n                this.header().color(clr);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mf.Component);\nmodule.exports = mofron.comp.AppBase;\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron-comp-appbase/index.js?")},"./node_modules/mofron-comp-apphdr/index.js":
/*!**************************************************!*\
  !*** ./node_modules/mofron-comp-apphdr/index.js ***!
  \**************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file   mofron-comp-apphdr/index.js\n * @author simpart\n */\nvar mf = __webpack_require__(/*! mofron */ \"./node_modules/mofron/index.js\");\nvar Header = __webpack_require__(/*! mofron-comp-ttlhdr */ \"./node_modules/mofron-comp-ttlhdr/index.js\");\n\nmf.comp.Apphdr = function (_Header) {\n    _inherits(_class, _Header);\n\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Apphdr');\n            _this.prmOpt(po);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'initDomConts',\n        value: function initDomConts(prm) {\n            try {\n                _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'initDomConts', this).call(this, prm);\n\n                /* set index area */\n                this.addChild(this.indexBase(), undefined, false);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'addChild',\n        value: function addChild(val, idx, flg) {\n            try {\n                if (false === flg) {\n                    _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'addChild', this).call(this, val, idx);\n                } else {\n                    _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'addChild', this).call(this, val, this.child().length - 1);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'logo',\n        value: function logo(img) {\n            try {\n                var chd = this.child();\n                if (undefined === img) {\n                    /* getter */\n                    return 0 !== chd.length || true === mf.func.isInclude(chd[0], 'Image') ? chd[0] : null;\n                }\n                /* setter */\n                if (true !== mf.func.isInclude(img, 'Image')) {\n                    throw new Error('invalid parameter');\n                }\n                this.title(img, 0);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'indexBase',\n        value: function indexBase(val) {\n            try {\n                if (undefined === val) {\n                    /* getter */\n                    if (undefined === this.m_idxbs) {\n                        this.indexBase(new mf.Component());\n                    }\n                    return this.m_idxbs;\n                }\n                /* setter */\n                if (true !== mf.func.isInclude(val, 'Component')) {\n                    throw new Error('invalid parameter');\n                }\n                val.style({\n                    'display': 'flex',\n                    'align-items': 'center',\n                    'margin-right': '20px',\n                    'margin-left': 'auto'\n                });\n                this.m_idxbs = val;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'indexConts',\n        value: function indexConts(val) {\n            try {\n                var idxbs = this.indexBase();\n                if (undefined === val) {\n                    /* getter */\n                    return idxcnt.child();\n                }\n                /* setter */\n                if (true !== mf.func.isInclude(val, 'Component')) {\n                    throw new Error('invalid parameter');\n                }\n                val.style({\n                    'margin-right': '20px',\n                    'margin-left': 'auto'\n                });\n                if (0 === idxbs.child().length) {\n                    idxbs.addChild(val);\n                } else {\n                    idxbs.updChild(idxbs.child()[0], val);\n                }\n\n                this.url(null === this.url() ? './' : undefined);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(Header);\nmodule.exports = mf.comp.Apphdr;\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron-comp-apphdr/index.js?")},"./node_modules/mofron-comp-button/index.js":
/*!**************************************************!*\
  !*** ./node_modules/mofron-comp-button/index.js ***!
  \**************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file   mofron-comp-button/index.js\n * @author simpart\n */\nvar mf = __webpack_require__(/*! mofron */ \"./node_modules/mofron/index.js\");\nvar Text = __webpack_require__(/*! mofron-comp-text */ \"./node_modules/mofron-comp-text/index.js\");\nvar Click = __webpack_require__(/*! mofron-event-click */ \"./node_modules/mofron-event-click/index.js\");\n/**\n * @class Button\n * @brief button component class\n */\nmf.comp.Button = function (_mf$Component) {\n    _inherits(_class, _mf$Component);\n\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Button');\n            _this.prmOpt(po);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n    /**\n     * initialize DOM contents\n     *\n     * @param prm : (string) button contents\n     * @param prm : (object) component object of button contents\n     */\n\n\n    _createClass(_class, [{\n        key: \"initDomConts\",\n        value: function initDomConts(prm) {\n            try {\n                _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"initDomConts\", this).call(this, 'button');\n\n                /* set contents */\n                if (true === mf.func.isInclude(prm, 'Text')) {\n                    this.addChild(prm);\n                } else if (undefined === prm) {\n                    this.addChild(new Text(''));\n                } else if ('string' === typeof prm) {\n                    this.addChild(new Text(prm));\n                }\n                /* set style */\n                this.style({ 'cursor': 'pointer' });\n                this.height(25);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: \"themeConts\",\n        value: function themeConts() {\n            try {\n                /* set text component */\n                var txt = this.theme().component('mofron-comp-text');\n                if (null !== txt) {\n                    txt.execOption(this.text().getOption());\n                    this.text(txt);\n                }\n                /* set color */\n                var clr = this.theme().color(0);\n                if (null !== clr) {\n                    this.color(clr);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * button click event setter / getter\n         * \n         * @param func : (function) function for click event listener\n         * @param prm : (mixed) function parameter (not required)\n         * @return (object) [0] -> event function\n         *                  [1] -> function parameter\n         * @note do not specify parameters, if use as getter\n         */\n\n    }, {\n        key: \"clickEvent\",\n        value: function clickEvent(func, prm) {\n            try {\n                if (undefined === func) {\n                    /* getter */\n                    var evt = this.event();\n                    for (var idx in evt) {\n                        if ('Click' === evt[idx].name()) {\n                            return evt[idx].eventFunc();\n                        }\n                    }\n                    return new Array(null, null);\n                }\n                /* setter */\n                if (null === func || 'function' !== typeof func) {\n                    throw new Error('invalid parameter');\n                }\n                this.addEvent(new Click(func, prm === undefined ? null : prm));\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * button color setter / getter\n         *\n         * @param clr : (object) mofron.util.Color object\n         * @return (null) no setting color\n         * @return (object) mofron.util.Color object\n         * @note do not specify parameters, if use as getter\n         */\n\n    }, {\n        key: \"color\",\n        value: function color(clr) {\n            try {\n                if (undefined === clr) {\n                    /* getter */\n                    return mf.func.getColor(this.style('background'));\n                }\n                /* setter */\n                if (false === mf.func.isObject(clr, 'Color')) {\n                    throw new Error('invalid parameter');\n                }\n\n                var rgb = clr.rgba();\n                if (290 > rgb[0] + rgb[1] + rgb[2]) {\n                    this.child()[0].color(new mf.Color(255, 255, 255));\n                }\n\n                this.style({ 'background': clr.getStyle() });\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: \"text\",\n        value: function text(txt) {\n            try {\n                if (undefined === txt) {\n                    /* getter */\n                    return this.child()[0];\n                }\n                /* setter */\n                if (true === mf.func.isInclude(txt, 'Text')) {\n                    if (0 === this.m_child.length) {\n                        this.addChild(txt);\n                    } else {\n                        this.updChild(this.child()[0], txt);\n                    }\n                } else if ('string' === typeof txt) {\n                    this.text().text(txt);\n                } else {\n                    throw new Error('invalid parameter');\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: \"height\",\n        value: function height(val, tflg) {\n            try {\n                var ret = _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"height\", this).call(this, val);\n                if (undefined === ret) {\n                    this.text().size(val * 0.7);\n                }\n                return ret;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: \"disableSts\",\n        value: function disableSts(prm) {\n            try {\n                if (undefined === prm) {\n                    /* getter */\n                    return undefined === this.m_disable ? false : this.m_disable;\n                }\n                /* setter */\n                if ('boolean' !== typeof prm) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_disable = prm;\n                if (true === prm) {\n                    this.target().attr({ 'disabled': 'disabled' });\n                } else {\n                    this.target().attr({ 'disabled': null });\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mf.Component);\nmodule.exports = mofron.comp.Button;\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron-comp-button/index.js?")},"./node_modules/mofron-comp-form/index.js":
/*!************************************************!*\
  !*** ./node_modules/mofron-comp-form/index.js ***!
  \************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file mofron-comp-form/index.js\n * @author simpart\n */\nvar mf = __webpack_require__(/*! mofron */ \"./node_modules/mofron/index.js\");\nvar Button = __webpack_require__(/*! mofron-comp-button */ \"./node_modules/mofron-comp-button/index.js\");\nvar Message = __webpack_require__(/*! mofron-comp-message */ \"./node_modules/mofron-comp-message/index.js\");\nvar Margin = __webpack_require__(/*! mofron-layout-margin */ \"./node_modules/mofron-layout-margin/index.js\");\nvar Center = __webpack_require__(/*! mofron-layout-hrzcenter */ \"./node_modules/mofron-layout-hrzcenter/index.js\");\n\n/**\n * @class Form\n * @brief form component for mofron\n */\nmf.comp.Form = function (_mf$Component) {\n    _inherits(_class, _mf$Component);\n\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Form');\n            _this.prmOpt(po);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'initDomConts',\n        value: function initDomConts(mgn, cnt) {\n            try {\n                _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'initDomConts', this).call(this);\n                this.target().style({ 'width': '100%' });\n\n                this.layout([new Margin('top', undefined === mgn ? 25 : mgn), new Center({ rate: undefined === cnt ? 70 : cnt })]);\n\n                _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'addChild', this).call(this, this.message(), false);\n                var sub = this.submitComp();\n                _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'addChild', this).call(this, sub.parent().parent());\n\n                this.initKeyEvent();\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'initKeyEvent',\n        value: function initKeyEvent() {\n            try {\n                if (undefined !== window.onkeyup) {\n                    var form = this;\n                    window.onkeyup = function (e) {\n                        try {\n                            var key = e.keyCode ? e.keyCode : e.which;\n                            var chd = form.child();\n                            var send_ret = null;\n                            for (var cidx in chd) {\n                                if (true !== mf.func.isInclude(chd[cidx], 'Form')) {\n                                    continue;\n                                }\n                                if (13 === key && true === chd[cidx].isFocused()) {\n                                    send_ret = form.send();\n                                    if (null !== send_ret) {\n                                        form.message(send_ret['cause']);\n                                    }\n                                    break;\n                                }\n                            }\n                        } catch (e) {\n                            console.error(e.stack);\n                            throw e;\n                        }\n                    };\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'marginCenter',\n        value: function marginCenter(mgn, cnt) {\n            try {\n                var margin = this.getConfig('layout', 'Margin');\n                var center = this.getConfig('layout', 'HrzCenter');\n                if (undefined === mgn) {\n                    /* getter */\n                    return [null === margin ? margin : margin.value(), null === center ? center : center.rate()];\n                }\n                /* setter */\n                if (null !== margin) {\n                    margin.value(mgn);\n                }\n                if (null !== center) {\n                    center.rate(cnt);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'callback',\n        value: function callback(func, prm) {\n            try {\n                if (undefined === func) {\n                    /* getter */\n                    return undefined === this.m_callback ? new Array(null, null) : this.m_callback;\n                }\n                /* setter */\n                if ('function' !== typeof func) {\n                    throw new Error('invalid parameter');\n                }\n                if (undefined === this.m_callback) {\n                    this.m_callback = new Array(null, null);\n                }\n                this.m_callback[0] = func;\n                this.m_callback[1] = undefined === prm ? null : prm;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'sendEvent',\n        value: function sendEvent(func, prm) {\n            try {\n                if (undefined === func) {\n                    /* getter */\n                    return undefined === this.m_sendevt ? new Array(null, null) : this.m_sendevt;\n                }\n                /* setter */\n                if ('function' !== typeof func) {\n                    throw new Error('invalid parameter');\n                }\n                if (undefined === this.m_sendevt) {\n                    this.m_sendevt = new Array(null, null);\n                }\n                this.m_sendevt[0] = func;\n                this.m_sendevt[1] = undefined === prm ? null : prm;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'send',\n        value: function send() {\n            try {\n                var ret_chk = this.checkValue();\n                if (null !== ret_chk) {\n                    return ret_chk;\n                }\n\n                var cb = this.callback();\n                var xhr = new XMLHttpRequest();\n                var form = this;\n                xhr.addEventListener('load', function (event) {\n                    if (null != cb[0]) {\n                        cb[0](JSON.parse(this.response), form, cb[1]);\n                    }\n                });\n                var send_uri = undefined === this.uri() ? this.m_param : this.uri();\n                if (null === send_uri) {\n                    throw new Error('invalid parameter');\n                }\n                xhr.open('POST', send_uri);\n                var send_val = this.value();\n\n                if (null !== this.sendEvent()[0]) {\n                    var ev_ret = this.sendEvent()[0](this, this.sendEvent()[1]);\n                    if (null !== ev_ret) {\n                        return {\n                            index: -1,\n                            cause: ev_ret\n                        };\n                    }\n                }\n                xhr.send(JSON.stringify(send_val));\n                return null;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'uri',\n        value: function uri(u) {\n            try {\n                if (undefined === u) {\n                    /* getter */\n                    return undefined === this.m_uri ? null : this.m_uri;\n                }\n                /* setter */\n                if ('string' !== typeof u) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_uri = u;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'checkValue',\n        value: function checkValue() {\n            try {\n                var items = this.getItems();\n                var ret_chk = null;\n                var form_idx = 0;\n                if (null === items) {\n                    return {\n                        index: -1,\n                        cause: 'form is no element'\n                    };\n                }\n                for (var idx in items) {\n                    /* null check */\n                    ret_chk = items[idx].checkValue();\n                    if (null !== ret_chk) {\n                        return {\n                            index: idx,\n                            cause: ret_chk\n                        };\n                    }\n                }\n                /* reset message */\n                this.message(null);\n                return null;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'value',\n        value: function value() {\n            try {\n                var ret_val = {};\n                var items = this.getItems();\n                var val_nm = null;\n                if (null === items) {\n                    return null;\n                }\n                /* get item value */\n                for (var idx in items) {\n                    val_nm = items[idx].sendKey();\n                    ret_val[null === val_nm ? 'prm_' + idx : val_nm] = items[idx].value();\n                }\n                return ret_val;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'message',\n        value: function message(msg) {\n            try {\n                if (undefined === msg) {\n                    /* getter */\n                    if (undefined === this.m_message) {\n                        this.message(new Message({\n                            text: '',\n                            color: new mf.Color(200, 60, 60),\n                            visible: false\n                        }));\n                    }\n                    return this.m_message;\n                }\n                /* setter */\n                if (true === mf.func.isInclude(msg, 'Message')) {\n                    this.m_message = msg;\n                } else if ('string' === typeof msg) {\n                    this.message().text(msg);\n                    this.message().visible(true);\n                    var mevt = this.msgEvent();\n                    if (null !== mevt[0]) {\n                        mevt[0](msg, mevt[1]);\n                    }\n                } else if (null === msg) {\n                    this.message().visible(false);\n                    var _mevt = this.msgEvent();\n                    if (null !== _mevt[0]) {\n                        _mevt[0](msg, _mevt[1]);\n                    }\n                } else {\n                    throw new Error('invalid parameter');\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'msgEvent',\n        value: function msgEvent(fnc, prm) {\n            try {\n                if (undefined === fnc) {\n                    /* getter */\n                    return undefined === this.m_msg_evt ? [null, null] : this.m_msg_evt;\n                }\n                /* setter */\n                if ('function' !== typeof fnc) {\n                    throw new Error('invalid paramter');\n                }\n                this.m_msg_evt = new Array(fnc, prm);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'submitComp',\n        value: function submitComp(sub) {\n            try {\n                if (undefined === sub) {\n                    /* getter */\n                    if (undefined === this.m_submit) {\n                        this.submitComp(new Button({\n                            text: 'Send',\n                            size: new mf.Param(100, 30)\n                        }));\n                    }\n                    return this.m_submit;\n                }\n                /* setter */\n                var clk_fnc = function clk_fnc(tgt, frm) {\n                    try {\n                        var ret = frm.send();\n                        if (null !== ret) {\n                            frm.message(ret['cause']);\n                        }\n                    } catch (e) {\n                        console.error(e.stack);\n                        throw e;\n                    }\n                };\n                if (true === mf.func.isInclude(sub, 'Button')) {\n                    if (undefined !== this.m_submit) {\n                        sub.color(this.m_submit.color());\n                        sub.size(this.m_submit.size()[0], this.m_submit.size()[1]);\n                        sub.clickEvent(clk_fnc, this);\n                        this.m_submit.parent().updChild(this.m_submit, sub);\n                        return;\n                    }\n                    var sub_wid = 'number' === typeof sub.width() ? sub.width() + 'px' : sub.width();\n                    new mf.Component({\n                        addChild: new mf.Component({\n                            addChild: sub,\n                            style: {\n                                'position': 'relative',\n                                'margin-left': '100%',\n                                'left': '-' + sub_wid\n                            }\n                        })\n                    });\n                    sub.width(null === sub.width() ? 100 : undefined);\n                    sub.clickEvent(clk_fnc, this);\n                    this.m_submit = sub;\n                } else if ('string' === typeof sub) {\n                    this.submitComp().text(sub);\n                } else {\n                    throw new Error('invalid parameter');\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'addChild',\n        value: function addChild(chd, idx, flg) {\n            try {\n                if (false !== flg) {\n                    _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'addChild', this).call(this, chd, undefined === idx ? this.child().length - 1 : idx);\n                } else {\n                    _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'addChild', this).call(this, chd, idx);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'width',\n        value: function width(prm) {\n            try {\n                var hcnt = this.getConfig('layout', 'HrzCenter');\n                if (undefined === prm) {\n                    /* getter */\n                    if (null === hcnt) {\n                        return null;\n                    }\n                    return hcnt.rate() + '%';\n                }\n                /* setter */\n                if (null === hcnt) {\n                    var chd = this.child();\n                    for (var cidx in chd) {\n                        if (true === mf.func.isInclude(chd[cidx], 'Form')) {\n                            chd[cidx].width(prm);\n                        }\n                    }\n                } else {\n                    hcnt.rate(prm);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'height',\n        value: function height(prm) {\n            try {\n                var mrg = this.getConfig('layout', 'Margin');\n                var chd = this.child();\n                if (undefined === prm) {\n                    /* getter */\n                    var hret = 0;\n                    var mval = null === mrg ? 0 : mrg.value();\n                    for (var cidx in chd) {\n                        if (true === mf.func.isInclude(chd[cidx], 'Message') && false === chd[cidx].visible()) {\n                            continue;\n                        }\n                        if (parseInt(cidx) + 1 == chd.length) {\n                            hret += this.submitComp().height();\n                        } else {\n                            hret += 'number' === typeof chd[cidx].height() ? chd[cidx].height() : 0;\n                        }\n                        hret += mval;\n                    }\n                    return hret;\n                }\n                /* setter */\n                if (null === mrg) {\n                    if ('number' !== typeof prm) {\n                        throw new Error('invalid paramter');\n                    }\n                    var chei = prm / (0 === chd.length) ? 1 : chd.length;\n                    for (var _cidx in chd) {\n                        chd[_cidx].height(chei);\n                    }\n                } else {\n                    mrg.value(prm);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'getItems',\n        value: function getItems() {\n            try {\n                var ret = new Array();\n                var chd = this.child();\n                for (var cidx in chd) {\n                    if (true === mf.func.isInclude(chd[cidx], 'FormItem')) {\n                        ret.push(chd[cidx]);\n                    }\n                }\n                return 0 === ret.length ? null : ret;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mf.Component);\nmodule.exports = mofron.comp.Form;\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron-comp-form/index.js?")},"./node_modules/mofron-comp-formitem/index.js":
/*!****************************************************!*\
  !*** ./node_modules/mofron-comp-formitem/index.js ***!
  \****************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file   mofron-comp-formitem/index.js\n * @brief  form item interface\n * @author simpart\n */\nvar mf = __webpack_require__(/*! mofron */ \"./node_modules/mofron/index.js\");\nvar Text = __webpack_require__(/*! mofron-comp-text */ \"./node_modules/mofron-comp-text/index.js\");\n/**\n * @class mofron.comp.FormItem\n * @brief form item component for mofron\n */\nmf.comp.FormItem = function (_mf$Component) {\n    _inherits(_class, _mf$Component);\n\n    /**\n     * initialize component\n     * \n     * @param po paramter or option\n     */\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('FormItem');\n            _this.prmOpt(po);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    /**\n     * initialize dom contents\n     * \n     * @param prm : \n     */\n\n\n    _createClass(_class, [{\n        key: 'initDomConts',\n        value: function initDomConts(prm) {\n            try {\n                _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'initDomConts', this).call(this);\n                this.addChild(new Text(''));\n                this.label(prm);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'label',\n        value: function label(prm) {\n            try {\n                if (undefined === prm) {\n                    /* getter */\n                    return this.child()[0];\n                }\n                /* setter */\n                if (!('string' === typeof prm || true === mf.func.isInclude(prm, 'Text'))) {\n                    throw new Error('invalid parameter');\n                }\n                if ('string' === typeof prm) {\n                    this.label().text(prm);\n                } else {\n                    this.updChild(this.label(), prm);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'require',\n        value: function require(flg) {\n            try {\n                if (undefined === flg) {\n                    /* getter */\n                    return undefined === this.m_req ? false : this.m_req;\n                }\n                /* setter */\n                if ('boolean' !== typeof flg) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_req = flg;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * item value getter/setter\n         * \n         */\n\n    }, {\n        key: 'value',\n        value: function value(prm) {\n            console.warn('not implements');\n        }\n\n        /**\n         * check item value valid\n         *\n         * @return (string) : error reason\n         * @return (null) : no error\n         */\n\n    }, {\n        key: 'checkValue',\n        value: function checkValue() {\n            try {\n                if (true === this.require()) {\n                    if (null === this.value()) {\n                        return '' === this.label().text() ? 'empty value' : this.label().text() + ' is required';\n                    }\n                }\n                return null;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * forcus status getter/setter\n         *\n         */\n\n    }, {\n        key: 'focus',\n        value: function focus(prm) {\n            try {\n                if (undefined === prm) {\n                    /* getter */\n                    if (document.activeElement.id === this.target().getId()) {\n                        return true;\n                    }\n                    return false;\n                }\n                /* setter */\n                if (true === prm) {\n                    this.target().getRawDom().focus();\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'changeEvent',\n        value: function changeEvent(fnc, prm) {\n            try {\n                if (undefined === fnc) {\n                    /* getter */\n                    return undefined === this.m_chgevt ? null : this.m_chgevt;\n                }\n                /* setter */\n                if ('function' !== typeof fnc) {\n                    throw new Error('invalid parameter');\n                }\n                if (undefined === this.m_chgevt) {\n                    this.m_chgevt = new Array();\n                }\n                this.m_chgevt.push([fnc, prm]);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'disableSts',\n        value: function disableSts(prm) {\n            if (undefined === prm) {\n                /* getter */\n                return 'disabled' === this.target().attr('disabled') ? true : false;\n            }\n            /* setter */\n            if ('boolean' !== typeof prm) {\n                throw new Error('invalid parameter');\n            }\n            this.target().attr({ 'disabled': true === prm ? 'disabled' : null });\n        }\n    }, {\n        key: 'sendKey',\n        value: function sendKey(nm) {\n            try {\n                if (undefined === nm) {\n                    /* getter */\n                    return undefined === this.m_send_key ? null : this.m_send_key;\n                }\n                /* setter */\n                if ('string' !== typeof nm) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_send_key = nm;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mf.Component);\nmodule.exports = mofron.comp.FormItem;\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron-comp-formitem/index.js?")},"./node_modules/mofron-comp-frame/index.js":
/*!*************************************************!*\
  !*** ./node_modules/mofron-comp-frame/index.js ***!
  \*************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file   mofron-comp-frame/index.js\n * @author simpart\n */\nvar mf = __webpack_require__(/*! mofron */ \"./node_modules/mofron/index.js\");\nvar Radius = __webpack_require__(/*! mofron-effect-radius */ \"./node_modules/mofron-effect-radius/index.js\");\nvar Shadow = __webpack_require__(/*! mofron-effect-shadow */ \"./node_modules/mofron-effect-shadow/index.js\");\n\n/**\n * @class Frame\n * @brief frame component class\n */\nmf.comp.Frame = function (_mf$Component) {\n    _inherits(_class, _mf$Component);\n\n    function _class(xo, y) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Frame');\n            _this.prmOpt(xo, y);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    /**\n     * initialize contents\n     * \n     * @param disp : (bool) visible flag\n     */\n\n\n    _createClass(_class, [{\n        key: 'initDomConts',\n        value: function initDomConts(x, y) {\n            try {\n                _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'initDomConts', this).call(this);\n\n                /* configure style */\n                var bd_clr = this.theme().color(0);\n                this.style({\n                    'border': 'solid',\n                    'border-color': null === bd_clr ? new mofron.Color(190, 190, 190).getStyle() : bd_clr.getStyle(),\n                    'border-width': '1px'\n                });\n\n                /* size setting */\n                if (undefined !== x) {\n                    this.size(x, y);\n                } else {\n                    /* this size is default size */\n                    this.size(100, 100);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'themeConts',\n        value: function themeConts() {\n            try {\n                var clr = this.theme().color(0);\n                if (null !== clr && null === this.color()) {\n                    this.color(clr);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'color',\n        value: function color(bgd, bdr) {\n            try {\n                var ret = _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'color', this).call(this, bgd);\n                if (undefined !== bdr) {\n                    /* set border color */\n                    if (true !== mf.func.isInclude(bdr, 'Color')) {\n                        throw new Error('invalid parameter');\n                    }\n                    this.style({\n                        'border-color': bdr.getStyle()\n                    });\n                }\n                return ret;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'radius',\n        value: function radius(val) {\n            try {\n                this.addEffect(new Radius(val));\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'shadow',\n        value: function shadow(val) {\n            try {\n                this.addEffect(new Shadow(val));\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'width',\n        value: function width(val) {\n            try {\n                return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'width', this).call(this, 'number' === typeof val ? val - 2 : val);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'height',\n        value: function height(val) {\n            try {\n                return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'height', this).call(this, 'number' === typeof val ? val - 2 : val);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mf.Component);\nmodule.exports = mofron.comp.Frame;\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron-comp-frame/index.js?")},"./node_modules/mofron-comp-header/index.js":
/*!**************************************************!*\
  !*** ./node_modules/mofron-comp-header/index.js ***!
  \**************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file   index.js\n * @brief  header component for mofron\n * @author simpart\n */\nvar mf = __webpack_require__(/*! mofron */ \"./node_modules/mofron/index.js\");\nvar Horizon = __webpack_require__(/*! mofron-layout-horizon */ \"./node_modules/mofron-layout-horizon/index.js\");\n\n/**\n * @class mofron.comp.Header\n * @brief header component class\n */\nmf.comp.Header = function (_mf$Component) {\n    _inherits(_class, _mf$Component);\n\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Header');\n            _this.prmOpt(po);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'initDomConts',\n        value: function initDomConts(prm) {\n            try {\n\n                /* set header dom contents */\n                var hdr = new mf.Dom({\n                    tag: 'div',\n                    component: this,\n                    style: { 'border-bottom': 'solid 1px lightgray',\n                        'float': 'left' }\n                });\n                var pad = new mf.Dom({\n                    tag: 'div',\n                    component: this,\n                    style: { 'float': 'none',\n                        'position': 'static' }\n                });\n\n                /* set dom contents */\n                this.adom().child([hdr, pad]);\n                this.target(hdr);\n\n                /* set default size */\n                this.size('100%', 50);\n                this.bind(true);\n\n                /* child comp is added at horizon layout */\n                this.addLayout(new Horizon());\n\n                /* set child component */\n                if (true === mf.func.isInclude(prm, 'Component')) {\n                    this.addChild(prm);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'themeConts',\n        value: function themeConts(thm) {\n            try {\n                if (null !== thm.color(0) && null === this.color()) {\n                    this.color(thm.color(0));\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * set/get header height\n         *\n         * @param hei : (int,string) height\n         */\n\n    }, {\n        key: 'height',\n        value: function height(val) {\n            try {\n                var ret = _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'height', this).call(this, val);\n                if (undefined !== ret) {\n                    return ret;\n                }\n                this.adom().child()[1].style({\n                    'height': 'number' === typeof val ? val + 'px' : px\n                });\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * header background color setter / getter\n         *\n         * clr : (object) color\n         */\n\n    }, {\n        key: 'color',\n        value: function color(clr) {\n            try {\n                if (undefined === clr) {\n                    /* getter */\n                    return mf.func.getColor(this.style('background'));\n                }\n                /* setter */\n                if (false === mf.func.isObject(clr, 'Color')) {\n                    throw new Error('invalid parameter');\n                }\n                this.style({ 'background': clr.getStyle() });\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'bind',\n        value: function bind(flg) {\n            try {\n                if (undefined === flg) {\n                    /* getter */\n                    return 'fixed' === this.style('position') ? true : false;\n                }\n                /* setter */\n                if ('boolean' !== typeof flg) {\n                    throw new Error('invalid parameter');\n                }\n\n                if (true === flg) {\n                    this.style({\n                        position: 'fixed',\n                        'z-index': 999\n                    });\n                } else {\n                    this.style({ position: null }, 'fixed' === this.style('position') ? false : true);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mf.Component);\nmodule.exports = mofron.comp.Header;\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron-comp-header/index.js?")},"./node_modules/mofron-comp-input/index.js":
/*!*************************************************!*\
  !*** ./node_modules/mofron-comp-input/index.js ***!
  \*************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file   mofron-comp-input/index.js\n * @brief  input component class\n * @author simpart\n */\nvar mf = __webpack_require__(/*! mofron */ \"./node_modules/mofron/index.js\");\nvar FormItem = __webpack_require__(/*! mofron-comp-formitem */ \"./node_modules/mofron-comp-formitem/index.js\");\nvar Text = __webpack_require__(/*! mofron-comp-text */ \"./node_modules/mofron-comp-text/index.js\");\n\nmf.comp.Input = function (_FormItem) {\n    _inherits(_class, _FormItem);\n\n    /**\n     * initialize inputtext component\n     *\n     * @param po : (string) label\n     * @param po : (object) option\n     */\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Input');\n            _this.prmOpt(po);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'initDomConts',\n        value: function initDomConts(prm) {\n            try {\n                _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'initDomConts', this).call(this, prm);\n                /* init input contents */\n                var inp = new mf.Dom({\n                    tag: 'input',\n                    target: this,\n                    attr: { 'type': 'text' }\n                });\n                this.target().addChild(inp);\n                this.target(inp);\n\n                /* set default size */\n                this.size(150, 25);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'afterRender',\n        value: function afterRender() {\n            try {\n                var chg_evt = this.changeEvent();\n                var txt_ara = this;\n                this.target().getRawDom().onkeyup = function () {\n                    try {\n                        if (null !== chg_evt) {\n                            for (var idx in chg_evt) {\n                                chg_evt[idx][0](txt_ara, chg_evt[idx][1]);\n                            }\n                        }\n                    } catch (e) {\n                        console.error(e.stack);\n                        throw e;\n                    }\n                };\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'width',\n        value: function width(prm) {\n            try {\n                var ret = _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'width', this).call(this, 'number' === typeof prm ? prm - 6 : prm);\n                return 'number' === typeof ret ? ret + 6 : ret;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'height',\n        value: function height(val) {\n            try {\n                var lbl_flg = '' === this.label().text() ? false : true;\n                if (undefined === val) {\n                    /* getter */\n                    var hret = 0;\n                    if (true === lbl_flg) {\n                        hret = this.label().height();\n                    }\n                    hret += mf.func.getLength(this.style('height'));\n                    return 'number' === typeof hret ? hret + 6 : hret;\n                }\n                /* setter */\n                if ('number' !== typeof val) {\n                    throw new Error('invalid parameter');\n                }\n\n                var inp_siz = true === lbl_flg ? val * 0.4 + 3 : val;\n                inp_siz -= 6;\n                this.label().height(true === lbl_flg ? val * 0.6 - 3 : undefined);\n                this.style({\n                    'height': inp_siz + 'px',\n                    'font-size': inp_siz - 2 + 'px'\n                });\n                if (true === lbl_flg) {\n                    this.style({ 'position': 'relative' });\n                    var tval = 0;\n                    if (40 >= val) {\n                        tval = -8;\n                    } else if (50 >= val) {\n                        tval = -2;\n                    } else if (60 >= val) {\n                        tval = -1;\n                    }\n                    this.style({ 'top': tval + 'px' });\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'text',\n        value: function text(val) {\n            try {\n                if (undefined === val) {\n                    /* getter */\n                    return '' === this.target().prop('value') ? null : this.target().prop('value');\n                }\n                /* setter */\n                if ('string' !== typeof val && true !== mf.func.isInclude(val, 'Text')) {\n                    throw new Error('invalid parameter');\n                }\n                /* set contents */\n                this.target().prop({\n                    value: 'string' === typeof val ? val : val.text()\n                });\n                this.target().attr({\n                    value: 'string' === typeof val ? val : val.text()\n                });\n\n                /* set text config */\n                if (true === mf.func.isInclude(val, 'Text')) {\n                    /* set text style */\n                    var size = val.size();\n                    this.style({\n                        'font-size': 'number' === typeof size ? size + 'px' : size\n                    });\n                    if (null !== val.color()) {\n                        this.style({\n                            'color': val.color().getStyle()\n                        });\n                    }\n                }\n\n                /* execute change event */\n                var chg_evt = this.changeEvent();\n                if (null !== chg_evt) {\n                    for (var idx in chg_evt) {\n                        chg_evt[idx][0](this, chg_evt[idx][1]);\n                    }\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'value',\n        value: function value(val) {\n            try {\n                if (undefined === val) {\n                    /* getter */\n                    return this.text(val);\n                }\n                /* setter */\n                this.text(val);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'maxLength',\n        value: function maxLength(len) {\n            try {\n                if (undefined === len) {\n                    /* getter */\n                    return this.target().attr('maxlength');\n                }\n                /* setter */\n                if ('number' !== typeof len) {\n                    throw new Error('invalid parameter');\n                }\n                this.target().attr({ maxlength: len });\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'secret',\n        value: function secret(flg) {\n            try {\n                if (undefined === flg) {\n                    /* getter */\n                    return 'password' === this.target().attr('type') ? true : false;\n                }\n                /* setter */\n                if ('boolean' !== typeof flg) {\n                    throw new Error('invalid parameter');\n                }\n                this.target().attr({ type: 'password' });\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'label',\n        value: function label(prm) {\n            try {\n                if (undefined === prm) {\n                    /* getter */\n                    return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'label', this).call(this);\n                }\n                /* setter */\n                var rsiz = 25 === this.height() ? true : false;\n                _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'label', this).call(this, prm);\n                if (true === rsiz) {\n                    this.height(50);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'color',\n        value: function color(prm) {\n            try {\n                var ret = _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'color', this).call(this, prm);\n                if (undefined === ret) {\n                    /* setter */\n                    var rgb = prm.rgba();\n                    rgb[0] = 0 > rgb[0] - 30 ? 0 : rgb[0] - 30;\n                    rgb[1] = 0 > rgb[1] - 30 ? 0 : rgb[1] - 30;\n                    rgb[2] = 0 > rgb[2] - 30 ? 0 : rgb[2] - 30;\n                    var set_clr = new mf.Color(rgb[0], rgb[1], rgb[2]).getStyle();\n                    this.style({\n                        'border-color': new mf.Color(rgb[0], rgb[1], rgb[2]).getStyle()\n                    });\n                }\n                return ret;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(FormItem);\nmodule.exports = mofron.comp.Input;\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron-comp-input/index.js?")},"./node_modules/mofron-comp-login/index.js":
/*!*************************************************!*\
  !*** ./node_modules/mofron-comp-login/index.js ***!
  \*************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file   mofron-comp-login/index.js\n * @author simpart\n */\nvar mf = __webpack_require__(/*! mofron */ \"./node_modules/mofron/index.js\");\n/* component */\nvar Appbase = __webpack_require__(/*! mofron-comp-appbase */ \"./node_modules/mofron-comp-appbase/index.js\");\nvar Frame = __webpack_require__(/*! mofron-comp-frame */ \"./node_modules/mofron-comp-frame/index.js\");\nvar LoginForm = __webpack_require__(/*! mofron-comp-loginform */ \"./node_modules/mofron-comp-loginform/index.js\");\n/* event */\nvar Click = __webpack_require__(/*! mofron-event-click */ \"./node_modules/mofron-event-click/index.js\");\n/* effect */\nvar Center = __webpack_require__(/*! mofron-effect-center */ \"./node_modules/mofron-effect-center/index.js\");\n\n/**\n * @class mofron.comp.Login\n * @brief login component for mofron\n */\nmf.comp.Login = function (_Appbase) {\n    _inherits(_class, _Appbase);\n\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Login');\n            _this.prmOpt(po);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    /**\n     * initialize vdom\n     * \n     * @param prm : (string) text contents\n     */\n\n\n    _createClass(_class, [{\n        key: 'initDomConts',\n        value: function initDomConts(prm) {\n            var _this2 = this;\n\n            try {\n                _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'initDomConts', this).call(this, prm);\n                mf.func.addResizeWin(function (p) {\n                    try {\n                        p.height(window.innerHeight - _this2.header().height());\n                    } catch (e) {\n                        console.error(e.stack);\n                        throw e;\n                    }\n                }, this);\n                this.height(window.innerHeight - this.header().height());\n\n                /* add frame */\n                this.contents(this.frame());\n\n                /* set form */\n                this.frame().addChild(this.form());\n\n                this.form().msgEvent(function (msg, lgn) {\n                    try {\n                        lgn.frame().height(lgn.form().height() + 30);\n                    } catch (e) {\n                        console.error(e.stack);\n                        throw e;\n                    }\n                }, this);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'frame',\n        value: function frame(frm) {\n            try {\n                if (undefined === frm) {\n                    /* getter */\n                    if (undefined === this.m_frame) {\n                        this.frame(new Frame({\n                            size: new mf.Param(450, 240),\n                            color: new mf.Color(250, 250, 250)\n                        }));\n                    }\n                    return this.m_frame;\n                }\n                /* setter */\n                if (false === mofron.func.isInclude(frm, 'Frame')) {\n                    throw new Error('invalid parameter');\n                }\n                frm.execOption({\n                    addEffect: new Center()\n                });\n                this.m_frame = frm;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'form',\n        value: function form(fom) {\n            try {\n                if (undefined === fom) {\n                    /* getter */\n                    if (undefined === this.m_form) {\n                        this.form(new LoginForm({}));\n                    }\n                    return this.m_form;\n                }\n                /* setter */\n                if (false === mf.func.isInclude(fom, 'Form')) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_form = fom;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'submit',\n        value: function submit(btn) {\n            try {\n                if (undefined === btn) {\n                    /* getter */\n                    return this.form().submitComp();\n                }\n                /* setter */\n                btn.text('Login');\n                this.form().submitComp(btn);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'authConf',\n        value: function authConf(uri, func) {\n            try {\n                var ret = this.form().uri(uri);\n                this.form().callback(func, this);\n                return ret;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'color',\n        value: function color(clr) {\n            try {\n                var ret = _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'color', this).call(this, clr);\n                if (undefined !== ret) {\n                    return ret;\n                }\n                /* set submit color */\n                this.submit().color(clr);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(Appbase);\nmodule.exports = mofron.comp.Login;\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron-comp-login/index.js?")},"./node_modules/mofron-comp-loginform/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/mofron-comp-loginform/index.js ***!
  \*****************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file mofron-comp-form-login/index.js\n * @author simpart\n */\nvar mf = __webpack_require__(/*! mofron */ \"./node_modules/mofron/index.js\");\nvar Form = __webpack_require__(/*! mofron-comp-form */ \"./node_modules/mofron-comp-form/index.js\");\nvar Input = __webpack_require__(/*! mofron-comp-input */ \"./node_modules/mofron-comp-input/index.js\");\n/**\n * @class LoginForm\n * @brief login form component for mofron\n */\nmf.comp.LoginForm = function (_Form) {\n    _inherits(_class, _Form);\n\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('LoginForm');\n            _this.prmOpt(po);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'initDomConts',\n        value: function initDomConts(prm) {\n            try {\n                _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'initDomConts', this).call(this, prm);\n                this.addChild(new Input({\n                    label: 'Username',\n                    setKey: 'username',\n                    require: true\n                }));\n\n                this.addChild(new Input({\n                    label: 'Password',\n                    setKey: 'password',\n                    require: true,\n                    secret: true\n                }));\n\n                this.submitComp().text('Login');\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'themeConts',\n        value: function themeConts() {\n            try {\n                var inp = this.theme().component('mofron-comp-input');\n                if (null !== inp) {\n                    //this.input(inp);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(Form);\nmodule.exports = mofron.comp.LoginForm;\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron-comp-loginform/index.js?")},"./node_modules/mofron-comp-message/index.js":
/*!***************************************************!*\
  !*** ./node_modules/mofron-comp-message/index.js ***!
  \***************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file   mofron-comp-message/index.js\n * @author simpart\n */\nvar mf = __webpack_require__(/*! mofron */ \"./node_modules/mofron/index.js\");\nvar Frame = __webpack_require__(/*! mofron-comp-frame */ \"./node_modules/mofron-comp-frame/index.js\");\nvar Text = __webpack_require__(/*! mofron-comp-text */ \"./node_modules/mofron-comp-text/index.js\");\n\n/**\n * @class Message\n * @brief text component for mofron\n */\nmf.comp.Message = function (_mf$Component) {\n    _inherits(_class, _mf$Component);\n\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Message');\n            _this.prmOpt(po);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    /**\n     * initialize vdom\n     * \n     * @param prm : (string) text contents\n     */\n\n\n    _createClass(_class, [{\n        key: 'initDomConts',\n        value: function initDomConts(prm) {\n            try {\n                _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'initDomConts', this).call(this);\n                this.addChild(this.frame());\n                this.target(this.frame().target());\n\n                this.text(null === prm ? '' : prm);\n                this.addChild(this.text());\n\n                this.size(350, 40);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'frame',\n        value: function frame(frm) {\n            try {\n                if (undefined === frm) {\n                    /* getter */\n                    if (undefined === this.m_msg_frm) {\n                        this.frame(new Frame());\n                    }\n                    return this.m_msg_frm;\n                }\n                /* setter */\n                if (true !== mf.func.isInclude(frm, 'Frame')) {\n                    throw new Error('invalid parameter');\n                }\n                frm.style({\n                    'display': 'flex',\n                    'align-items': 'center'\n                });\n                this.m_msg_frm = frm;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'text',\n        value: function text(txt) {\n            try {\n                if (undefined === txt) {\n                    /* getter */\n                    if (undefined === this.m_msg_txt) {\n                        this.text('');\n                    }\n                    return this.m_msg_txt;\n                }\n                /* setter */\n                if (undefined !== this.m_msg_txt) {\n                    /* update message text */\n                    if ('string' === typeof txt) {\n                        this.m_msg_txt.text(txt);\n                    } else if (true === mf.func.isInclude(txt, 'Text')) {\n                        this.updChild(this.m_msg_txt, txt);\n                    } else {\n                        throw new Error('invalid parameter');\n                    }\n                } else {\n                    var set_txt = txt;\n                    if ('string' === typeof set_txt) {\n                        set_txt = new Text(txt);\n                        set_txt.style({\n                            'margin-left': '10px'\n                        });\n                    }\n                    if (true === mf.func.isInclude(set_txt, 'Text')) {\n                        this.m_msg_txt = set_txt;\n                    } else {\n                        throw new Error('invalid parameter');\n                    }\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * text color setter / getter\n         * \n         * @param clr : (mofron.Color) color object\n         * @return (string) color\n         * @note do not specify parameters, if use as getter\n         */\n\n    }, {\n        key: 'color',\n        value: function color(clr) {\n            try {\n                if (undefined === clr) {\n                    /* getter */\n                    return mf.func.getColor(this.style('border-color'));\n                }\n                /* setter */\n                if (false === mf.func.isObject(clr, 'Color')) {\n                    throw new Error('invalid parameter');\n                }\n                /* set border color */\n                this.style({\n                    'border-color': clr.getStyle()\n                });\n                /* set frame color */\n                var val = clr.rgba();\n                clr.rgba(val[0] > 85 ? 255 : val[0] + 170, val[1] > 85 ? 255 : val[1] + 170, val[2] > 85 ? 255 : val[2] + 170, val[3]);\n                this.frame().color(clr);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'height',\n        value: function height(val) {\n            try {\n                if (40 < val) {\n                    this.text().size(val - 20);\n                }\n                return this.frame().height(val);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mf.Component);\nmofron.comp.message = {};\nmodule.exports = mofron.comp.Message;\n\n//# sourceURL=webpack:///./node_modules/mofron-comp-message/index.js?")},"./node_modules/mofron-comp-text/index.js":
/*!************************************************!*\
  !*** ./node_modules/mofron-comp-text/index.js ***!
  \************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file   Text.js\n * @author simpart\n */\nvar mf = __webpack_require__(/*! mofron */ \"./node_modules/mofron/index.js\");\n/**\n * @class Text\n * @brief text component for mofron\n */\nmf.comp.Text = function (_mf$Component) {\n    _inherits(_class, _mf$Component);\n\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Text');\n            _this.prmOpt(po);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    /**\n     * initialize vdom\n     * \n     * @param prm : (string) text contents\n     */\n\n\n    _createClass(_class, [{\n        key: 'initDomConts',\n        value: function initDomConts(prm) {\n            try {\n                _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'initDomConts', this).call(this);\n\n                /* set contents */\n                this.text(null === prm ? '' : prm);\n                /* set default size */\n                this.size(24);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'themeConts',\n        value: function themeConts() {\n            try {\n                var fnt = this.theme().font(0);\n                if (null !== fnt && null === this.font()) {\n                    this.font(fnt, true);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * text contents setter / getter\n         *\n         * @param val : (string) text contents\n         * @return (string) text contents\n         * @note do not specify parameters, if use as getter\n         */\n\n    }, {\n        key: 'text',\n        value: function text(val) {\n            try {\n                if (undefined === val) {\n                    /* getter */\n                    return this.target().text();\n                }\n                /* setter */\n                this.target().text(val);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * text size setter / getter\n         *\n         * @param val : (number) font size (px)\n         * @param val : (string,null) font size (manual)\n         * @return (string) font size\n         * @note do not specify parameters, if use as getter\n         */\n\n    }, {\n        key: 'size',\n        value: function size(val) {\n            try {\n                if (undefined === val) {\n                    /* getter */\n                    var ret_siz = mf.func.getLength(this.style('font-size'));\n                    if (null !== ret_siz && 'number' === typeof ret_siz) {\n                        return ret_siz + ret_siz / 2;\n                    }\n                    return ret_siz;\n                }\n                /* setter */\n                if ('number' === typeof val) {\n                    var buf = 2 * val;\n                    val = buf / 3 + 'px';\n                }\n                this.style({ 'font-size': val });\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'height',\n        value: function height(val) {\n            try {\n                if (undefined === val) {\n                    /* getter */\n                    return this.size();\n                }\n                /* setter */\n                this.size(val);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * text color setter / getter\n         * \n         * @param clr : (mofron.Color) color object\n         * @return (string) color\n         * @note do not specify parameters, if use as getter\n         */\n\n    }, {\n        key: 'color',\n        value: function color(clr) {\n            try {\n                if (undefined === clr) {\n                    /* getter */\n                    return mf.func.getColorObj(this.style('color'));\n                }\n                /* setter */\n                if (false === mf.func.isInclude(clr, 'Color')) {\n                    throw new Error('invalid parameter');\n                }\n                this.style({ 'color': clr.getStyle() });\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * text font setter / getter\n         * \n         * @param fnt : (object) mofron.util.Font object\n         * @param thm : (boolean) theme flag\n         *                        true  : set font as theme\n         *                        false : set font (default)\n         * @return (object) mofron.util.Font object\n         * @note do not specify parameters, if use as getter\n         */\n\n    }, {\n        key: 'font',\n        value: function font(fnt, thm) {\n            try {\n                if (undefined === fnt) {\n                    /* getter */\n                    return this.style('font-family');\n                }\n                /* setter */\n                var _thm = undefined === thm ? false : thm;\n                if (false === mf.func.isInclude(fnt, 'Font') || 'boolean' !== typeof _thm) {\n                    throw new Error('invalid parameter');\n                }\n                if (false === _thm) {\n                    this.style({ 'font-family': fnt.getFamilyStyle() });\n                } else {\n                    var clnm = this.target().className();\n                    for (var idx in clnm) {\n                        if (clnm[idx] === fnt.className()) {\n                            return;\n                        }\n                    }\n                    this.target().className(fnt.className());\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'space',\n        value: function space(val) {\n            try {\n                if (undefined === val) {\n                    /* getter */\n                    return mf.func.getLength(this.style('letter-spacing'));\n                }\n                /* setter */\n                if ('number' !== typeof val) {\n                    throw new Error('invalid parameter');\n                }\n                this.style({\n                    'letter-spacing': val + 'px'\n                });\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'weight',\n        value: function weight(prm) {\n            try {\n                if (undefined === prm) {\n                    /* getter */\n                    return this.style('font-weight');\n                }\n                /* setter */\n                this.style({ 'font-weight': prm });\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mf.Component);\nmodule.exports = mofron.comp.Text;\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron-comp-text/index.js?")},"./node_modules/mofron-comp-ttlhdr/index.js":
/*!**************************************************!*\
  !*** ./node_modules/mofron-comp-ttlhdr/index.js ***!
  \**************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file   mofron-comp-ttlhdr/index.js\n * @brief  title header component for mofron\n * @author simpart\n */\nvar mf = __webpack_require__(/*! mofron */ \"./node_modules/mofron/index.js\");\nvar Header = __webpack_require__(/*! mofron-comp-header */ \"./node_modules/mofron-comp-header/index.js\");\nvar Text = __webpack_require__(/*! mofron-comp-text */ \"./node_modules/mofron-comp-text/index.js\");\nvar Click = __webpack_require__(/*! mofron-event-click */ \"./node_modules/mofron-event-click/index.js\");\nvar Horizon = __webpack_require__(/*! mofron-layout-horizon */ \"./node_modules/mofron-layout-horizon/index.js\");\n\nmf.comp.Ttlhdr = function (_Header) {\n    _inherits(_class, _Header);\n\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Ttlhdr');\n            _this.prmOpt(po);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n    /**\n     * initialize dom contents\n     *\n     * @param prm : (string, mofron-comp-text) title\n     */\n\n\n    _createClass(_class, [{\n        key: 'initDomConts',\n        value: function initDomConts(prm) {\n            try {\n                _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'initDomConts', this).call(this);\n\n                this.target().style({\n                    'align-items': 'center'\n                });\n                var ttl_base = new mf.Component({\n                    addLayout: new Horizon(),\n                    style: {\n                        'align-items': 'center',\n                        'margin-left': '20px'\n                    }\n                });\n                this.addChild(ttl_base);\n\n                /* set header title area */\n                if (null !== prm) {\n                    this.title(prm);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'title',\n        value: function title(val, idx) {\n            try {\n                var ttl = this.child()[0];\n                if (undefined === val) {\n                    /* getter */\n                    return 0 === ttl.child().length ? null : ttl.child();\n                }\n                /* setter */\n                if ('string' === typeof val) {\n                    val = new Text(val);\n                } else if (true !== mf.func.isInclude(val, 'Component')) {\n                    throw new Error('invalid parameter');\n                }\n\n                if (true === mf.func.isInclude(val, 'Text')) {\n                    val.size(this.height() - 10);\n                } else if (true === mf.func.isInclude(val, 'Component')) {\n                    val.height(this.height());\n                } else {\n                    throw new Error('invalid parameter');\n                }\n\n                this.setTitleEvent(val);\n                this.setTitleColor(val);\n\n                ttl.addChild(val, idx);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'setTitleEvent',\n        value: function setTitleEvent(val) {\n            try {\n                var clk_fnc = function clk_fnc(tgt, ttl) {\n                    try {\n                        location.href = null === ttl.url() ? './' : ttl.url();\n                    } catch (e) {\n                        console.log(e.stack);\n                    }\n                };\n                /* set click event */\n                val.addEvent(new Click(clk_fnc, this));\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'setTitleColor',\n        value: function setTitleColor(ttl) {\n            try {\n                if (null === this.color()) {\n                    return;\n                }\n                var rgb = this.color().rgba();\n                var clr = 290 > rgb[0] + rgb[1] + rgb[2] ? new mf.Color(255, 255, 255) : new mf.Color(0, 0, 0);\n\n                if (true === mf.func.isInclude(ttl, 'Text')) {\n                    ttl.color(clr);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'color',\n        value: function color(clr) {\n            try {\n                var ret = _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'color', this).call(this, clr);\n                if (undefined !== ret) {\n                    if (null === ret) {\n                        this.color(new mf.Color(255, 255, 255));\n                        return this.color();\n                    }\n                    return ret;\n                }\n                var ttl = this.title();\n                if (null !== ttl) {\n                    for (var tidx in ttl) {\n                        this.setTitleColor(ttl[tidx]);\n                    }\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'url',\n        value: function url(ul) {\n            try {\n                if (undefined === ul) {\n                    /* getter */\n                    return undefined === this.m_url ? null : this.m_url;\n                }\n                /* setter */\n                if ('string' !== typeof ul) {\n                    throw new Error('invalid prameter');\n                }\n                this.m_url = ul;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'height',\n        value: function height(val) {\n            try {\n                var ret = _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'height', this).call(this, val);\n                if (undefined !== ret) {\n                    /* getter */\n                    return ret;\n                }\n                /* setter */\n                if ('number' !== typeof val) {\n                    throw new Error('invalid parameter');\n                }\n                var ttl = this.child();\n                for (var idx in ttl) {\n                    if (true === mf.func.isInclude(ttl[idx], 'Text')) {\n                        if (val < ttl[idx].size() - 10) {\n                            ttl[idx].size(val - 10);\n                        }\n                    }\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(Header);\nmodule.exports = mf.comp.Ttlhdr;\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron-comp-ttlhdr/index.js?")},"./node_modules/mofron-effect-center/index.js":
/*!****************************************************!*\
  !*** ./node_modules/mofron-effect-center/index.js ***!
  \****************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file mofron-effect-center/index.js\n * @author simpart\n */\nvar mf = __webpack_require__(/*! mofron */ \"./node_modules/mofron/index.js\");\n\n/**\n * @class mofron.effect.Center\n * @brief center effect class\n */\nmf.effect.Center = function (_mf$Effect) {\n    _inherits(_class, _mf$Effect);\n\n    function _class(p_xflg, yflg) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Center');\n\n            _this.prmOpt(p_xflg, yflg);\n            if (null !== _this.param()) {\n                _this.xflag(p_xflg);\n                _this.yflag(yflg);\n            }\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'xflag',\n        value: function xflag(flg) {\n            try {\n                if (undefined === flg) {\n                    /* getter */\n                    return undefined === this.m_xflag ? true : this.m_xflag;\n                }\n                /* setter */\n                if ('boolean' !== typeof flg) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_xflag = flg;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'yflag',\n        value: function yflag(flg) {\n            try {\n                if (undefined === flg) {\n                    /* getter */\n                    return undefined === this.m_yflag ? true : this.m_yflag;\n                }\n                /* setter */\n                if ('boolean' !== typeof flg) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_yflag = flg;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'enable',\n        value: function enable(tgt) {\n            try {\n                if (true === this.xflag()) {\n                    this.enable_x(tgt);\n                }\n\n                if (true === this.yflag()) {\n                    this.enable_y(tgt);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'enable_x',\n        value: function enable_x(tgt) {\n            try {\n                var wid = tgt.width();\n                if (true === mf.func.isInclude(tgt, 'Text') && null !== tgt.parent() && 'flex' !== tgt.parent().style('display')) {\n                    tgt.style({\n                        'text-align': 'center'\n                    });\n                } else if (null !== wid) {\n                    tgt.style({\n                        'position': 'relative',\n                        'left': '50%'\n                    });\n\n                    if ('string' === typeof wid) {\n                        if (undefined === tgt.width().split('%')[0]) {\n                            throw new Error('invalid width');\n                        }\n                        wid = parseInt(tgt.width().split('%')[0]);\n                        if ('number' === typeof wid) {\n                            tgt.style({\n                                'margin-left': '-' + wid / 2 + '%'\n                            });\n                        }\n                    } else {\n                        tgt.style({\n                            'margin-left': '-' + wid / 2 + 'px'\n                        });\n                    }\n                } else {\n                    if (null !== tgt.parent()) {\n                        tgt.parent().style({\n                            'display': 'flex'\n                        });\n                    } else {\n                        tgt.parentListener(function () {\n                            try {\n                                tgt.parent().style({\n                                    'display': 'flex'\n                                });\n                            } catch (e) {\n                                console.error(e.stack);\n                                throw e;\n                            }\n                        });\n                    }\n                    tgt.style({\n                        'margin-left': 'auto',\n                        'margin-right': 'auto'\n                    });\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'enable_y',\n        value: function enable_y(tgt) {\n            try {\n                if (true === mf.func.isInclude(tgt, 'Image')) {\n                    tgt.style({\n                        'display': 'block',\n                        'margin-top': 'auto',\n                        'margin-bottom': 'auto'\n                    });\n                } else if (true === mf.func.isInclude(tgt, 'Text') && null !== tgt.parent()) {\n                    tgt.parent().style({\n                        'display': 'flex',\n                        'align-items': 'center'\n                    });\n                } else {\n                    tgt.style({\n                        'position': 'relative',\n                        'top': '50%',\n                        '-webkit-transform': 'translateY(-50%)',\n                        'transform': 'translateY(-50%)'\n                    });\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'disable',\n        value: function disable(tgt) {\n            try {\n                if (true === this.xflag()) {\n                    if (true === mf.func.isInclude(tgt, 'Text') && null !== tgt.parent() && 'flex' !== tgt.parent().style('display')) {\n                        tgt.style({\n                            'text-align': null\n                        });\n                    }\n                    tgt.style({\n                        'margin-left': null,\n                        'margin-right': null\n                    });\n                    if (null !== tgt.width()) {\n                        tgt.style({\n                            'position': null,\n                            'left': null\n                        });\n                    } else {\n                        tgt.parent().style({\n                            'display': null\n                        });\n                    }\n                }\n\n                if (true === this.yflag()) {\n                    tgt.style({\n                        'top': null\n                    });\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mf.Effect);\nmodule.exports = mofron.effect.Center;\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron-effect-center/index.js?")},"./node_modules/mofron-effect-radius/index.js":
/*!****************************************************!*\
  !*** ./node_modules/mofron-effect-radius/index.js ***!
  \****************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file mofron-effect-radius/index.js\n * @author simpart\n */\n\n/**\n * @class Radius\n * @brief radius style effect class\n */\nmofron.effect.Radius = function (_mofron$Effect) {\n    _inherits(_class, _mofron$Effect);\n\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Radius');\n\n            if ('number' === typeof po) {\n                _this.value(po);\n            } else {\n                _this.setPrmOpt(po);\n                _this.execOption();\n            }\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'value',\n        value: function value(val) {\n            try {\n                if (undefined === val) {\n                    return undefined === this.m_value ? 50 : this.m_value;\n                }\n\n                if ('number' !== typeof val || 0 > val) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_value = val;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'enable',\n        value: function enable() {\n            try {\n                this.target().style({\n                    'webkit-border-radius': this.value() + 'px',\n                    '-moz-border-radius': this.value() + 'px',\n                    'border-radius': this.value() + 'px'\n                });\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'disable',\n        value: function disable() {\n            try {\n                this.target().style({\n                    'webkit-border-radius': '0px',\n                    '-moz-border-radius': '0px',\n                    'border-radius': '0px'\n                });\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.Effect);\nmodule.exports = mofron.effect.Radius;\n\n//# sourceURL=webpack:///./node_modules/mofron-effect-radius/index.js?")},"./node_modules/mofron-effect-shadow/index.js":
/*!****************************************************!*\
  !*** ./node_modules/mofron-effect-shadow/index.js ***!
  \****************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file shadow.js\n * @author simpart\n */\nvar mf = __webpack_require__(/*! mofron */ \"./node_modules/mofron/index.js\");\n\n/**\n * @class Shadow\n * @brief Shadow class for mofron effect\n */\nmofron.effect.Shadow = function (_mofron$Effect) {\n    _inherits(_class, _mofron$Effect);\n\n    function _class(prm) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Shadow');\n            _this.prmOpt('number' !== typeof prm ? prm : { value: prm });\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'value',\n        value: function value(val) {\n            try {\n                if (undefined === val) {\n                    return undefined === this.m_value ? 50 : this.m_value;\n                }\n\n                if ('number' !== typeof val || 0 > val) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_value = val;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'color',\n        value: function color(clr) {\n            try {\n                if (undefined === clr) {\n                    /* getter */\n                    if (undefined === this.m_color) {\n                        this.color(new mf.Color(128, 128, 128));\n                    }\n                    return this.m_color;\n                }\n                /* setter */\n                if (false === mf.func.isInclude(clr, 'Color')) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_color = clr;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'enable',\n        value: function enable(tgt) {\n            try {\n                tgt.style({\n                    'box-shadow': '0px ' + this.value() / 2 + 'px ' + this.value() + 'px ' + '0px ' + this.color().getStyle()\n                });\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'disable',\n        value: function disable(tgt) {\n            try {\n                tgt.style({ 'box-shadow': null });\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.Effect);\nmodule.exports = mofron.effect.Shadow;\n\n//# sourceURL=webpack:///./node_modules/mofron-effect-shadow/index.js?")},"./node_modules/mofron-event-click/index.js":
/*!**************************************************!*\
  !*** ./node_modules/mofron-event-click/index.js ***!
  \**************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file Click.js\n * @author simpart\n */\n\n/**\n * @class mofron.event.Click\n * @brief click event class for component\n */\nmofron.event.Click = function (_mofron$Event) {\n    _inherits(_class, _mofron$Event);\n\n    function _class(fnc, prm) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Click');\n\n            /* font theme */\n            _this.m_pointer = true;\n\n            if ('object' === (typeof fnc === 'undefined' ? 'undefined' : _typeof(fnc))) {\n                _this.prmOpt(fnc);\n            } else {\n                _this.handler(fnc, prm);\n            }\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    /**\n     * add click event to target component.\n     */\n\n\n    _createClass(_class, [{\n        key: 'eventConts',\n        value: function eventConts(tgt_dom) {\n            try {\n                var evt_func = this.handler();\n                if (true === this.pointer()) {\n                    this.target().style({\n                        'cursor': 'pointer'\n                    });\n                }\n                var tgt = this.target();\n                tgt_dom.getRawDom().addEventListener('click', function () {\n                    try {\n                        if (null != evt_func[0]) {\n                            evt_func[0](tgt, evt_func[1]);\n                        }\n                    } catch (e) {\n                        console.error(e.stack);\n                        throw e;\n                    }\n                }, false);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'pointer',\n        value: function pointer(flg) {\n            try {\n                if (undefined === flg) {\n                    return this.m_pointer;\n                }\n\n                if ('boolean' !== typeof flg) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_pointer = flg;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.Event);\nmodule.exports = mofron.event.Click;\n\n//# sourceURL=webpack:///./node_modules/mofron-event-click/index.js?")},"./node_modules/mofron-layout-horizon/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/mofron-layout-horizon/index.js ***!
  \*****************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file index.js\n * @author simpart\n */\n\n/**\n * @class layout.Horizon\n * @brief horizon layout class\n */\nmofron.layout.Horizon = function (_mofron$Layout) {\n    _inherits(_class, _mofron$Layout);\n\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Horizon');\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'layoutConts',\n        value: function layoutConts() {\n            try {\n                if (0 === this.m_execnt++) {\n                    this.target().style(_defineProperty({\n                        'display': '-webkit-flex'\n                    }, 'display', 'flex'));\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.Layout);\nmodule.exports = mofron.layout.Horizon;\n\n//# sourceURL=webpack:///./node_modules/mofron-layout-horizon/index.js?")},"./node_modules/mofron-layout-hrzcenter/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/mofron-layout-hrzcenter/index.js ***!
  \*******************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file mofron-layout-hrzcenter/index.js\n * @author simpart\n */\n\n/**\n * @class HrzCenter\n * @brief horizon center layout\n */\nmofron.layout.HrzCenter = function (_mofron$Layout) {\n    _inherits(_class, _mofron$Layout);\n\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('HrzCenter');\n            'number' === typeof po ? _this.rate(po) : _this.prmOpt(po);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'layoutConts',\n        value: function layoutConts(idx, tgt) {\n            try {\n                if (null !== this.rate()) {\n                    var type = this.type();\n                    if (null === type) {\n                        tgt.adom().style({\n                            position: 'relative',\n                            left: (100 - this.rate()) / 2 + '%'\n                        });\n                    } else {\n                        var set_style = {};\n                        set_style[type + '-left'] = (100 - this.rate()) / 2 + '%';\n                        tgt.adom().style(set_style);\n                    }\n                    if ('function' === typeof tgt.width) {\n                        tgt.width(this.rate() + '%');\n                    } else {\n                        tgt.adom().style({\n                            width: this.rate() + '%'\n                        });\n                    }\n                } else if (null !== this.width()) {\n                    tgt.style({\n                        position: 'relative',\n                        'margin-left': 'auto',\n                        'margin-right': 'auto'\n                    });\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'rate',\n        value: function rate(rt) {\n            try {\n                if (undefined === rt) {\n                    /* getter */\n                    return undefined === this.m_rate ? null : this.m_rate;\n                }\n                /* setter */\n                if ('number' !== typeof rt || 0 > rt) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_rate = rt;\n                if (null !== this.target() && true === this.target().adom().isPushed()) {\n                    this.execute();\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'width',\n        value: function width(wid) {\n            try {\n                if (undefined === wid) {\n                    /* getter */\n                    return undefined === this.m_width ? null : this.m_width;\n                }\n                /* setter */\n                if ('number' !== typeof wid && 'string' !== typeof wid) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_width = wid;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'type',\n        value: function type(tp) {\n            try {\n                if (undefined === tp) {\n                    /* getter */\n                    return undefined === this.m_type ? null : this.m_type;\n                }\n                /* setter */\n                if ('string' !== typeof tp || !('padding' === tp || 'margin' === tp)) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_type = tp;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.Layout);\nmofron.layout.hrzcenter = {};\nmodule.exports = mofron.layout.HrzCenter;\n\n//# sourceURL=webpack:///./node_modules/mofron-layout-hrzcenter/index.js?")},"./node_modules/mofron-layout-margin/index.js":
/*!****************************************************!*\
  !*** ./node_modules/mofron-layout-margin/index.js ***!
  \****************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file mofron-layout-margin/index.js\n * @brief margin layout of mofron\n * @author simpart\n */\n\nmofron.layout.Margin = function (_mofron$Layout) {\n    _inherits(_class, _mofron$Layout);\n\n    function _class(tp, val) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Margin');\n\n            _this.m_type = null;\n            _this.m_value = null;\n\n            if ('object' === (typeof tp === 'undefined' ? 'undefined' : _typeof(tp))) {\n                _this.prmOpt(tp);\n            } else {\n                if ('string' === typeof tp) {\n                    _this.type(tp);\n                    _this.value(val);\n                } else if ('number' === typeof tp) {\n                    _this.value(tp);\n                }\n            }\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'layoutConts',\n        value: function layoutConts(idx, tgt) {\n            try {\n                var mg = 'margin';\n                if ('' !== this.type() && null !== this.type()) {\n                    mg += '-' + this.type();\n                }\n                var setmgn = {};\n                setmgn[mg] = this.value() + 'px';\n                tgt.vdom().style(setmgn);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'type',\n        value: function type(tp) {\n            try {\n                if (undefined === tp) {\n                    return undefined === this.m_type ? null : this.m_type;\n                }\n                if ('string' != typeof tp || '' != tp && 'top' != tp && 'right' != tp && 'bottom' != tp && 'left' != tp) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_type = tp;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'value',\n        value: function value(val) {\n            try {\n                if (undefined === val) {\n                    return this.m_value;\n                }\n                if (null === val || 'number' !== typeof val) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_value = val;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.Layout);\nmofron.layout.margin = {};\nmodule.exports = mofron.layout.Margin;\n\n//# sourceURL=webpack:///./node_modules/mofron-layout-margin/index.js?")},"./node_modules/mofron/index.js":
/*!**************************************!*\
  !*** ./node_modules/mofron/index.js ***!
  \**************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\n\n__webpack_require__(/*! expose-loader?mofron!./src/core/namesp.js */ "./node_modules/expose-loader/index.js?mofron!./node_modules/mofron/src/core/namesp.js-exposed");\n__webpack_require__(/*! ./src/common/Base.js */ "./node_modules/mofron/src/common/Base.js");\n__webpack_require__(/*! ./src/common/Param.js */ "./node_modules/mofron/src/common/Param.js");\nmofron.func = __webpack_require__(/*! ./src/common/function.js */ "./node_modules/mofron/src/common/function.js");\n\n__webpack_require__(/*! ./src/util/conf/DomConf.js */ "./node_modules/mofron/src/util/conf/DomConf.js");\n__webpack_require__(/*! ./src/util/conf/Attr.js */ "./node_modules/mofron/src/util/conf/Attr.js");\n__webpack_require__(/*! ./src/util/conf/ClassName.js */ "./node_modules/mofron/src/util/conf/ClassName.js");\n__webpack_require__(/*! ./src/util/conf/DomConf.js */ "./node_modules/mofron/src/util/conf/DomConf.js");\n__webpack_require__(/*! ./src/util/conf/Prop.js */ "./node_modules/mofron/src/util/conf/Prop.js");\n__webpack_require__(/*! ./src/util/conf/Style.js */ "./node_modules/mofron/src/util/conf/Style.js");\n__webpack_require__(/*! ./src/util/conf/CompConf.js */ "./node_modules/mofron/src/util/conf/CompConf.js");\n\n__webpack_require__(/*! ./src/util/dom/Dom.js */ "./node_modules/mofron/src/util/dom/Dom.js");\n__webpack_require__(/*! ./src/util/dom/Adom.js */ "./node_modules/mofron/src/util/dom/Adom.js");\n\n__webpack_require__(/*! ./src/util/Color.js */ "./node_modules/mofron/src/util/Color.js");\n__webpack_require__(/*! ./src/util/Font.js */ "./node_modules/mofron/src/util/Font.js");\n__webpack_require__(/*! ./src/util/Theme.js */ "./node_modules/mofron/src/util/Theme.js");\n__webpack_require__(/*! ./src/util/CompCtrl.js */ "./node_modules/mofron/src/util/CompCtrl.js");\n\n__webpack_require__(/*! ./src/core/Component.js */ "./node_modules/mofron/src/core/Component.js");\n__webpack_require__(/*! ./src/core/Layout.js */ "./node_modules/mofron/src/core/Layout.js");\n__webpack_require__(/*! ./src/core/Event.js */ "./node_modules/mofron/src/core/Event.js");\n__webpack_require__(/*! ./src/core/Effect.js */ "./node_modules/mofron/src/core/Effect.js");\n\nmodule.exports = mofron;\n\n//# sourceURL=webpack:///./node_modules/mofron/index.js?')},"./node_modules/mofron/src/common/Base.js":
/*!************************************************!*\
  !*** ./node_modules/mofron/src/common/Base.js ***!
  \************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @file Base.js\n * @author simpart\n */\n\n/**\n * @class Base\n * @brief top of mofron parent class\n */\nmofron.Base = function () {\n    function _class() {\n        _classCallCheck(this, _class);\n\n        try {\n            this.m_name = new Array();\n            this.name('Base');\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n    }\n\n    /**\n     * component name setter / getter\n     *\n     * @param nm : (string) component name\n     * @return (string) component name\n     * @note parameter syntax\n     */\n\n\n    _createClass(_class, [{\n        key: 'name',\n        value: function name(nm) {\n            try {\n                if (undefined === nm) {\n                    if (0 === this.m_name.length) {\n                        return null;\n                    }\n                    return this.m_name[this.m_name.length - 1];\n                }\n                if (!('string' === typeof nm || 'object' === (typeof nm === 'undefined' ? 'undefined' : _typeof(nm)) && undefined !== nm[0])) {\n                    throw new Error('invalid parameter');\n                }\n                if ('object' === (typeof nm === 'undefined' ? 'undefined' : _typeof(nm))) {\n                    for (var idx in nm) {\n                        this.m_name.push(nm[idx]);\n                    }\n                } else {\n                    this.m_name.push(nm);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'data',\n        value: function data(key, val) {\n            try {\n                if (undefined === val) {\n                    /* getter */\n                    if (undefined === this.m_data) {\n                        return null;\n                    }\n                    return undefined === this.m_data[key] ? null : this.m_data[key];\n                }\n                /* setter */\n                if ('string' !== typeof key) {\n                    throw new Error('invalid parameter');\n                }\n                if (undefined === this.m_data) {\n                    this.m_data = {};\n                }\n                this.m_data[key] = val;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'getNameList',\n        value: function getNameList() {\n            try {\n                return this.m_name;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'getId',\n        value: function getId() {\n            try {\n                if (undefined === this.m_id) {\n                    this.m_id = mofron.func.getId();\n                }\n                return this.m_id;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'param',\n        value: function param(prm) {\n            try {\n                if (undefined === prm) {\n                    /* getter */\n                    return undefined === this.m_param ? null : this.m_param.getParam();\n                }\n                /* setter */\n                this.m_param = prm;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'getOption',\n        value: function getOption() {\n            try {\n                return undefined === this.m_opt ? null : this.m_opt;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'addOption',\n        value: function addOption(opt) {\n            try {\n                if ('object' !== (typeof opt === 'undefined' ? 'undefined' : _typeof(opt))) {\n                    throw new Error('invalid parameter');\n                }\n                if (undefined === this.m_opt) {\n                    this.m_opt = {};\n                }\n                for (var oidx in opt) {\n                    this.m_opt[oidx] = opt[oidx];\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'setPrmOpt',\n        value: function setPrmOpt(po, p2, p3, p4, p5) {\n            try {\n                var prm_cnt = 0;\n                for (var pidx in arguments) {\n                    if (undefined !== arguments[pidx]) {\n                        prm_cnt++;\n                    }\n                }\n                if (0 === prm_cnt) {\n                    return;\n                } else if (1 === prm_cnt) {\n                    if ('object' === (typeof po === 'undefined' ? 'undefined' : _typeof(po))) {\n                        if (\"undefined\" === typeof po[0]) {\n                            if (true === mofron.func.isInclude(po, 'Base')) {\n                                /* this is parameter */\n                                this.param(new mofron.Param(po));\n                                return;\n                            }\n\n                            for (var pidx2 in po) {\n                                if ('string' !== typeof pidx2) {\n                                    /* this is paramter */\n                                    this.param(new mofron.Param(po));\n                                    return;\n                                }\n                            }\n                            /* this is option */\n                            this.addOption(po);\n                        } else {\n                            /* this is paramter */\n                            this.param(new mofron.Param(po));\n                        }\n                    } else {\n                        /* this is paramter */\n                        this.param(new mofron.Param(po, p2, p3, p4, p5));\n                    }\n                } else {\n                    this.param(new mofron.Param(po, p2, p3, p4, p5));\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'prmOpt',\n        value: function prmOpt(po, p1, p2, p3, p4) {\n            try {\n                this.setPrmOpt(po, p1, p2, p3, p4);\n                var opt = this.getOption();\n                if (null !== opt) {\n                    this.execOption();\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'delOption',\n        value: function delOption(key) {\n            try {\n                if ('string' !== typeof key) {\n                    throw new Error('invalid parameter');\n                }\n                delete this.m_opt[key];\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'execOption',\n        value: function execOption(opt) {\n            try {\n                if (undefined !== opt) {\n                    this.addOption(opt);\n                } else {\n                    opt = this.getOption();\n                }\n\n                if (null === opt) {\n                    return;\n                }\n\n                for (var opt_idx in opt) {\n                    if ('function' === typeof this[opt_idx]) {\n                        if ('name' === this[opt_idx]) {\n                            throw new Error('invalid option name');\n                        }\n                        if (true === mofron.func.isObject(opt[opt_idx], 'Param')) {\n                            opt[opt_idx].call(this, opt_idx);\n                        } else {\n                            this[opt_idx](opt[opt_idx]);\n                        }\n                    }\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}();\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron/src/common/Base.js?")},"./node_modules/mofron/src/common/Param.js":
/*!*************************************************!*\
  !*** ./node_modules/mofron/src/common/Param.js ***!
  \*************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file Param.js\n * @author simpart\n */\n\n/**\n * @class Param\n * @brief option paramter for mofron object\n */\nmofron.Param = function (_mofron$Base) {\n    _inherits(_class, _mofron$Base);\n\n    function _class() {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Param');\n\n            _this.m_param = new Array();\n            for (var idx in arguments) {\n                if (undefined === arguments[idx]) {\n                    continue;\n                }\n                _this.m_param.push(arguments[idx]);\n            }\n\n            if (0 === _this.m_param.length) {\n                throw new Error('too few parameter');\n            } else if (5 <= _this.m_param.length) {\n                throw new Error('too many parameters');\n            }\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'getParam',\n        value: function getParam() {\n            try {\n                return this.m_param;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'call',\n        value: function call(obj, func) {\n            try {\n                if (null === obj || 'object' !== (typeof obj === 'undefined' ? 'undefined' : _typeof(obj))) {\n                    throw new Error('invalid paramter');\n                }\n                if ('string' !== typeof func) {\n                    throw new Error('invalid parameter');\n                }\n                var prm = this.getParam();\n                if (1 === prm.length) {\n                    console.warn('you shuld call ' + func + '() without mofron.Param object');\n                    obj[func](prm[0]);\n                } else if (2 === prm.length) {\n                    obj[func](prm[0], prm[1]);\n                } else if (3 === prm.length) {\n                    obj[func](prm[0], prm[1], prm[2]);\n                } else if (4 === prm.length) {\n                    obj[func](prm[0], prm[1], prm[2], prm[3]);\n                } else {\n                    obj[func](prm[0], prm[1], prm[2], prm[3], prm[4]);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.Base);\n\n//# sourceURL=webpack:///./node_modules/mofron/src/common/Param.js?")},"./node_modules/mofron/src/common/function.js":
/*!****************************************************!*\
  !*** ./node_modules/mofron/src/common/function.js ***!
  \****************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * @file function.js\n * @brief util functions\n * @author simpart\n */\n\nmodule.exports = {\n    /**\n     * get unique id\n     *\n     * @param tgt : (object) target mofron object\n     * @return (string) unique id\n     */\n    getId: function getId(tgt) {\n        try {\n            var _tgt = tgt === undefined ? null : tgt;\n            var ipf = \"aid\";\n            if (null !== _tgt) {\n                ipf = _tgt.name();\n            }\n            var ret_id = ipf + '-' + new Date().getTime() + '-';\n            var loop = 0;\n            var val = 0;\n            for (loop = 0; loop < 8; loop++) {\n                val = Math.random() * 16 | 0;\n                ret_id += (loop == 12 ? 4 : loop == 16 ? val & 3 | 8 : val).toString(16);\n            }\n            return ret_id;\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n    },\n\n    getCamel: function getCamel(sty) {\n        try {\n            if ('string' !== typeof sty) {\n                throw new Error('invalid parameter');\n            }\n\n            if (sty.length - 1 === sty.lastIndexOf('-')) {\n                throw new Error('invalid parameter');\n            }\n\n            var skip = false;\n            if (0 === sty.indexOf('-')) {\n                skip = true;\n            }\n\n            var ret_val = sty;\n            var ret_buf = null;\n            var up_str = null;\n            var idx = null;\n            while (true) {\n                idx = ret_val.indexOf('-');\n                if (-1 === idx) {\n                    break;\n                }\n                up_str = ret_val.charAt(idx + 1).toUpperCase();\n                ret_buf = ret_val.substr(0, idx);\n                if (true === skip) {\n                    skip = false;\n                    ret_val = ret_buf + ret_val.substr(idx + 1);\n                } else {\n                    ret_val = ret_buf + up_str + ret_val.substr(idx + 2);\n                }\n            }\n            return ret_val;\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n    },\n\n    getColor: function getColor(sty) {\n        try {\n            if ('none' === sty) {\n                return new mofron.Color();\n            } else if (null === sty) {\n                return null;\n            }\n\n            var color = null;\n            if (-1 !== sty.indexOf('rgba(')) {\n                color = sty.substring(5);\n            } else if (-1 !== sty.indexOf('rgb(')) {\n                color = sty.substring(4);\n            } else {\n                return null;\n            }\n\n            color = color.substring(0, color.length - 1);\n            color = color.split(',');\n            if (3 === color.length) {\n                return new mofron.Color(parseInt(color[0]), parseInt(color[1]), parseInt(color[2]));\n            } else if (4 === color.length) {\n                return new mofron.Color(parseInt(color[0]), parseInt(color[1]), parseInt(color[2]), parseInt(color[3]));\n            } else {\n                return null;\n            }\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n    },\n\n    getLength: function getLength(val) {\n        try {\n            if ('string' !== typeof val) {\n                return null;\n            }\n            if (val.length - 2 === val.indexOf('px')) {\n                return parseInt(val.split('px')[0]);\n            }\n            return val;\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n    },\n\n    getCompSize: function getCompSize(cmp) {\n        try {\n            if (false === mofron.func.isInclude(cmp, 'Component')) {\n                throw new Error('invalid parameter');\n            }\n            var wid = null;\n            var hei = null;\n\n            /* get x-value */\n            if ('function' === typeof cmp.width) {\n                wid = cmp.width();\n            } else if ('function' === typeof cmp.size) {\n                wid = cmp.size().width;\n            } else {\n                wid = mofron.func.getLength(cmp.style('width'));\n            }\n\n            /* get y-value */\n            if ('function' === typeof cmp.height) {\n                hei = cmp.height();\n            } else if ('function' === typeof cmp.size) {\n                hei = cmp.size().height;\n            } else {\n                hei = mofron.func.getLength(cmp.style('height'));\n            }\n\n            return {\n                width: wid,\n                height: hei\n            };\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n    },\n\n    getStyleConts: function getStyleConts(sel, cnt) {\n        try {\n            var ret_val = sel + '{';\n            for (var idx in cnt) {\n                ret_val += idx + ':' + cnt[idx] + ';';\n            }\n            return ret_val + '}';\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n    },\n\n    isInclude: function isInclude(obj, nm) {\n        try {\n            if (null === obj || 'object' !== (typeof obj === 'undefined' ? 'undefined' : _typeof(obj))) {\n                return false;\n            }\n            if ('function' !== typeof obj.name) {\n                return false;\n            }\n            var chk_nm = 'string' === typeof nm ? [nm] : nm;\n            var chk_idx = 0;\n            var name_lst = obj.getNameList();\n            for (var idx in name_lst) {\n                if (chk_nm[chk_idx] === name_lst[idx]) {\n                    chk_idx++;\n                    if (chk_nm.length === chk_idx) {\n                        return true;\n                    }\n                    continue;\n                }\n                if (0 < chk_idx) {\n                    break;\n                }\n            }\n            return false;\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n    },\n\n    isObject: function isObject(obj, nm) {\n        try {\n            if (null === obj || 'object' !== (typeof obj === 'undefined' ? 'undefined' : _typeof(obj))) {\n                return false;\n            }\n            if ('function' !== typeof obj.name) {\n                return false;\n            }\n            if ('string' !== typeof nm) {\n                throw new Error('invalid parameter');\n            }\n\n            if (nm === obj.name()) {\n                return true;\n            }\n            return false;\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n    },\n\n    addHeadConts: function addHeadConts(opt) {\n        try {\n            if ('object' !== (typeof opt === 'undefined' ? 'undefined' : _typeof(opt)) || null === opt) {\n                throw new Error('invalid parameter');\n            }\n\n            var tag = opt.tag;\n            var contents = undefined === opt.contents ? '' : opt.contents;\n            if (undefined === tag || 'string' !== typeof tag) {\n                throw new Error(\"invalid parameter\");\n            }\n\n            /* get attr contents */\n            var set_conts = '';\n            var attr_conts = '';\n            var attr = undefined === opt.attr ? null : opt.attr;\n            for (var key in attr) {\n                attr_conts += key;\n                if (null != attr[key]) {\n                    attr_conts += '=\"' + attr[key] + '\" ';\n                }\n            }\n\n            /* check simple tag */\n            var simple = false;\n            if (undefined === opt.simple) {\n                simple = 'link' === tag || 'meta' === tag || 'base' === tag ? true : false;\n            } else {\n                simple = opt.simple;\n            }\n\n            /* init contents string */\n            var conts_str = '';\n            if ('object' === (typeof contents === 'undefined' ? 'undefined' : _typeof(contents))) {\n                for (var cidx in contents) {\n                    if ('string' !== typeof contents[cidx]) {\n                        throw new Error('invalid parameter');\n                    }\n                    conts_str += contents[cidx];\n                }\n            } else if ('string' === typeof contents) {\n                conts_str = contents;\n            } else {\n                throw new Error('invalid parameter');\n            }\n\n            /* add tag */\n            if (false === simple) {\n                var add_conts = '<' + tag + ' ' + attr_conts + '>' + conts_str + '</' + tag + '>';\n            } else {\n                var add_conts = '<' + tag + ' ' + attr_conts + '>' + conts_str;\n            }\n\n            if (undefined !== mofron.ssr) {\n                mofron.ssr.head(add_conts);\n            } else {\n                document.head.insertAdjacentHTML('beforeend', add_conts);\n            }\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n    },\n\n    addResizeWin: function addResizeWin(func, prm, tlag) {\n        try {\n            var que_buf = null;\n            var param = prm;\n            var time_lag = undefined === tlag ? 200 : tlag;\n            if ('function' !== typeof func || 'number' !== typeof time_lag) {\n                throw new Error('invalid parameter');\n            }\n            window.addEventListener('resize', function () {\n                try {\n                    clearTimeout(que_buf);\n                    que_buf = setTimeout(func, time_lag, param);\n                } catch (e) {\n                    console.error(e.stack);\n                    throw new Error();\n                }\n            }, false);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n    },\n\n    getTemp: function getTemp(key) {\n        try {\n            return undefined === mofron.temp[key] ? null : mofron.temp[key];\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n    },\n\n    setTemp: function setTemp(key, val) {\n        try {\n            mofron.temp[key] = val;\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n    }\n};\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron/src/common/function.js?")},"./node_modules/mofron/src/core/Component.js":
/*!***************************************************!*\
  !*** ./node_modules/mofron/src/core/Component.js ***!
  \***************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file   Component.js\n * @author simpart\n */\n\n/**\n * @class Base\n * @brief base component class\n */\nmofron.Component = function (_mofron$Base) {\n    _inherits(_class, _mofron$Base);\n\n    /**\n     * initialize member, adom\n     *\n     * @param po : (object) component parameter / option (not require)\n     */\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Component');\n\n            /* initialize member */\n            _this.m_child = new Array();\n            _this.m_adom = null;\n            _this.m_conf = new Array(new Array(), /* layout */\n            new Array(), /* effect */\n            new Array() /* event */\n            );\n            _this.m_target = new Array(null, /* child */\n            null, /* style */\n            null /* event */\n            );\n            _this.prmOpt(po);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    /*** method ***/\n\n    _createClass(_class, [{\n        key: 'name',\n        value: function name(nm) {\n            try {\n                if (undefined === nm) {\n                    return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'name', this).call(this);\n                }\n                _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'name', this).call(this, nm);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * child target setter / getter\n         * \n         * @param tgt : (object) dom/adom object\n         * @param idx : (number) set index\n         * @return (object) dom/adom object\n         */\n\n    }, {\n        key: 'target',\n        value: function target(tgt, idx) {\n            try {\n                this.adom();\n                var _idx = undefined === idx ? 0 : idx;\n                if (undefined === tgt) {\n                    /* getter */\n                    if (0 === _idx && null === this.m_target[_idx]) {\n                        if (0 === this.adom().child().length) {\n                            return null;\n                        }\n                        this.target(this.adom().child()[0]);\n                    }\n                    return this.m_target[_idx];\n                }\n                /* setter */\n                if (null === tgt || 'object' !== (typeof tgt === 'undefined' ? 'undefined' : _typeof(tgt))) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_target[_idx] = tgt;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * get style target adom\n         *\n         * @param tgt : (object) dom/adom object\n         * @return (object) dom/adom object\n         */\n\n    }, {\n        key: 'styleTgt',\n        value: function styleTgt(tgt) {\n            try {\n                if (undefined === tgt) {\n                    /* getter */\n                    if (null === this.m_target[1]) {\n                        if (null === this.target()) {\n                            return null;\n                        }\n                        this.target(this.target(), 1);\n                    }\n                    return this.m_target[1];\n                }\n                /* setter */\n                this.target(tgt, 1);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * get event target adom\n         *\n         * @param tgt : (object) dom/adom object\n         * @return (object) dom/adom object\n         */\n\n    }, {\n        key: 'eventTgt',\n        value: function eventTgt(tgt) {\n            try {\n                if (undefined === tgt) {\n                    /* getter */\n                    if (this.target().getId() === this.adom().getId()) {\n                        this.target(this.adom().child()[0], 2);\n                    } else if (null === this.m_target[2]) {\n                        return this.target();\n                    }\n                    return this.m_target[2];\n                }\n                /* setter */\n                return this.target(tgt, 2);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * child component setter / getter\n         * \n         * @param chd : (object) child component\n         * @param chd : (object) child component array\n         * @return (array) : childlen object\n         */\n\n    }, {\n        key: 'child',\n        value: function child(chd) {\n            try {\n                if (undefined === chd) {\n                    /* getter */\n                    this.adom(); // for before initDomConts()\n                    return this.m_child;\n                }\n                /* setter */\n                if (true !== Array.isArray(chd)) {\n                    this.addChild(chd);\n                    return;\n                }\n                for (var idx in chd) {\n                    this.addChild(chd[idx]);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'addChild',\n        value: function addChild(chd, idx) {\n            try {\n                if (false === mofron.func.isInclude(chd, 'Component')) {\n                    throw new Error('invalid parameter');\n                }\n\n                /* configure child */\n                chd.theme(null === this.theme() ? undefined : this.theme());\n\n                /* setting parent-child relation */\n                chd.parent(this); // child's parent is me\n                this.target().addChild(chd.adom(), idx); // parent relate to child at dom level\n\n                if (null !== this.target().component().parent() && this.getId() === this.target().component().parent().getId()) {\n                    /* target is inner component */\n                    this.target().component().addChild(chd, idx);\n                    return;\n                }\n\n                if (undefined === idx || 0 === this.m_child.length) {\n                    this.m_child.push(chd);\n                } else {\n                    this.m_child.splice(idx, 0, chd);\n                }\n\n                if (null !== this.m_adom && this.adom().isPushed()) {\n                    /* render child */\n                    var lo = this.layout();\n                    for (var lo_idx in lo) {\n                        lo[lo_idx].execute();\n                    }\n                    chd.render();\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'updChild',\n        value: function updChild(o_chd, n_chd) {\n            try {\n                if (false === mofron.func.isInclude(o_chd, 'Component') || false === mofron.func.isInclude(n_chd, 'Component')) {\n                    throw new Error('invalid parameter');\n                }\n\n                /* search index of old-child */\n                var chd = this.child();\n                var upd_idx = null;\n                for (var chd_idx in chd) {\n                    if (chd[chd_idx].getId() === o_chd.getId()) {\n                        upd_idx = chd_idx;\n                        break;\n                    }\n                }\n                if (null === upd_idx) {\n                    throw new Error('invalid parameter');\n                }\n\n                var old_tgt = chd[upd_idx].adom().parent();\n                var buf_tgt = this.target();\n\n                /* replace child */\n                var upd_disp = this.child()[upd_idx].visible();\n                this.child()[upd_idx].destroy();\n\n                this.target(old_tgt);\n                this.addChild(n_chd, upd_idx);\n                this.target(buf_tgt);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /* for destroy */\n\n    }, {\n        key: 'delChild',\n        value: function delChild(idx) {\n            try {\n                if ('number' !== typeof idx || undefined === this.child()[idx]) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_child.splice(idx, 1);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * parent getter / setter\n         *\n         * @param pnt : (object) parent component\n         */\n\n    }, {\n        key: 'parent',\n        value: function parent(pnt) {\n            try {\n                if (undefined === pnt) {\n                    return undefined === this.m_parent ? null : this.m_parent;\n                }\n                if (null !== pnt && false === mofron.func.isInclude(pnt, 'Component')) {\n                    throw new Error('invalid parameter');\n                }\n\n                if (null !== pnt && null !== this.parent() || null !== this.m_adom && true === this.target().isPushed()) {\n                    /* rewrite parent */\n                    this.destroy();\n                }\n                this.m_parent = pnt;\n                var lis = this.parentListener();\n                for (var lidx in lis) {\n                    lis[lidx][0](this, lis[lidx][1]);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'parentListener',\n        value: function parentListener(evt, prm) {\n            try {\n                if (undefined === evt) {\n                    /* getter */\n                    return undefined === this.m_pnt_lis ? [] : this.m_pnt_lis;\n                }\n                /* setter */\n                if ('function' !== typeof evt) {\n                    throw new Error('invalid parameter');\n                }\n                if (undefined === this.m_pnt_lis) {\n                    this.m_pnt_lis = new Array();\n                }\n                this.m_pnt_lis.push([evt, prm]);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * style getter / setter\n         *\n         * @param kv (object) \n         * @param los (boolean) loose flag\n         * @return (object) style object\n         */\n\n    }, {\n        key: 'style',\n        value: function style(kv, los) {\n            try {\n                if ('string' === typeof kv || undefined === kv) {\n                    /* getter */\n                    return this.styleTgt().style(kv);\n                }\n                /* setter */\n                this.styleTgt().style(kv, los);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'event',\n        value: function event(evt) {\n            try {\n                if (undefined === evt) {\n                    /* getter */\n                    return this.config(2);\n                }\n                /* setter */\n                if ('object' !== (typeof evt === 'undefined' ? 'undefined' : _typeof(evt))) {\n                    this.addEvent(evt);\n                    return;\n                }\n                for (var eidx in evt) {\n                    this.addEvent(evt[eidx]);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * add component event \n         *\n         * @param evt : (object) event object\n         */\n\n    }, {\n        key: 'addEvent',\n        value: function addEvent(evt) {\n            try {\n                this.addConfig(2, evt);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'layout',\n        value: function layout(lo) {\n            try {\n                if (undefined === lo) {\n                    /* getter */\n                    return this.config(0);\n                }\n                /* setter */\n                if ('object' !== (typeof lo === 'undefined' ? 'undefined' : _typeof(lo))) {\n                    this.addLayout(lo);\n                    return;\n                }\n                for (var lidx in lo) {\n                    this.addLayout(lo[lidx]);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * add component layout\n         *\n         * @param lo : (object) layout object\n         */\n\n    }, {\n        key: 'addLayout',\n        value: function addLayout(lo) {\n            try {\n                this.addConfig(0, lo);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'effect',\n        value: function effect(eff) {\n            try {\n                if (undefined === eff) {\n                    /* getter */\n                    return this.config(1);\n                }\n                /* setter */\n                if ('object' !== (typeof eff === 'undefined' ? 'undefined' : _typeof(eff))) {\n                    this.addEffect(eff);\n                    return;\n                }\n                for (var eidx in eff) {\n                    this.addEffect(eff[eidx]);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'getConfig',\n        value: function getConfig(tp, nm) {\n            try {\n                if ('layout' !== tp && 'effect' !== tp && 'event' !== tp) {\n                    throw new Error('invalid type');\n                }\n                var cnf = this[tp]();\n                if (undefined !== nm) {\n                    for (var cidx in cnf) {\n                        if (cnf[cidx].name() === nm) {\n                            return cnf[cidx];\n                        }\n                    }\n                } else {\n                    return cnf;\n                }\n                return null;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'delConfig',\n        value: function delConfig(tp, nm) {\n            try {\n                if ('layout' !== tp && 'effect' !== tp && 'event' !== tp) {\n                    throw new Error('invalid type');\n                }\n                var cnf = this[tp]();\n                if (undefined !== nm) {\n                    for (var cidx in cnf) {\n                        if (cnf[cidx].name() === nm) {\n                            /* delete target */\n                            if ('layout' === tp) {\n                                this.m_conf[0].splice(cidx, 1);\n                            } else if ('effect' === tp) {\n                                this.m_conf[1].splice(cidx, 1);\n                            } else if ('event' === tp) {\n                                this.m_conf[2].splice(cidx, 1);\n                            }\n                        }\n                    }\n                } else {\n                    return cnf;\n                }\n                return null;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'addEffect',\n        value: function addEffect(eff, flg) {\n            try {\n                if (undefined !== eff.speed()) {\n                    /* update effect speed */\n                    var eff_lst = this.effect();\n                    for (var eidx in eff_lst) {\n                        eff_lst[eidx].speed(eff.speed());\n                    }\n                } else {\n                    if (0 !== this.effect().length && undefined !== this.effect()[0].speed()) {\n                        eff.speed(this.effect()[0].speed());\n                    }\n                }\n                if (undefined !== flg) {\n                    eff.defStatus(flg);\n                }\n                this.addConfig(1, eff);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'config',\n        value: function config(idx, cnf) {\n            try {\n                if (undefined === cnf) {\n                    /* getter */\n                    return undefined === this.m_conf[idx] ? null : this.m_conf[idx];\n                }\n                /* setter */\n                if ('object' !== (typeof cnf === 'undefined' ? 'undefined' : _typeof(cnf))) {\n                    throw new Error('invalid parameter');\n                }\n                if (undefined !== cnf[0]) {\n                    for (var cidx in cnf) {\n                        /* set child array */\n                        this.addConfig(idx, cnf[cidx]);\n                    }\n                    return;\n                }\n                this.addConfig(idx, cnf);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'addConfig',\n        value: function addConfig(idx, cnf) {\n            try {\n                if (undefined === this.m_conf[idx] || false === mofron.func.isInclude(cnf, 'CompConf')) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_conf[idx].push(cnf);\n                cnf.target(this);\n                if (true === this.adom().isPushed()) {\n                    if (1 === idx && false === cnf.defStatus()) {\n                        return;\n                    }\n                    cnf.execute();\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * theme setter / getter\n         *\n         * @param thm : (object) theme object\n         * @return (object) theme object\n         */\n\n    }, {\n        key: 'theme',\n        value: function theme(thm) {\n            try {\n                if (undefined === thm) {\n                    /* getter */\n                    if (undefined === this.m_theme) {\n                        this.m_theme = new mofron.Theme({});\n                        this.m_theme.target(this);\n                    }\n                    return this.m_theme;\n                }\n                /* setter */\n                this.theme().setTheme(thm);\n                var chd = this.m_child;\n                for (var idx in chd) {\n                    chd[idx].theme(thm);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'themeConts',\n        value: function themeConts() {}\n\n        /**\n         * create componrnt DOM\n         * \n         */\n\n    }, {\n        key: 'render',\n        value: function render() {\n            try {\n                /* push contents to DOM */\n                if (null === this.parent()) {\n                    mofron.root.push(this);\n                }\n\n                /* set child config */\n                this.initConfig(0); // layout\n                this.initConfig(1); // effect\n\n                /* before push event */\n                this.beforeRender();\n                this.adom().pushDom(null === this.parent() ? null : this.parent().target());\n                /* after push event */\n                this.afterRender();\n\n                this.initConfig(2); // event\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'beforeRender',\n        value: function beforeRender() {\n            try {\n                var chd = this.child();\n                for (var idx in chd) {\n                    chd[idx].beforeRender();\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'afterRender',\n        value: function afterRender() {\n            try {\n                var chd = this.child();\n                for (var idx in chd) {\n                    chd[idx].afterRender();\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'initConfig',\n        value: function initConfig(tgt_idx) {\n            try {\n                /* set child config */\n                var chd = this.child();\n                for (var cidx in chd) {\n                    chd[cidx].initConfig(tgt_idx);\n                }\n\n                /* set config */\n                var cnf = this.config(tgt_idx);\n                for (var cfidx in cnf) {\n                    cnf[cfidx].execute(1 === tgt_idx ? cnf[cfidx].defStatus() : undefined);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            try {\n                if (null === this.m_adom) {\n                    throw new Error('not initialized yet');\n                }\n                /* delete at dom level */\n                this.adom().destroy();\n\n                /* delete at component level */\n                if (null !== this.parent()) {\n                    var chd = this.parent().child(); // children from parent\n                    for (var idx in chd) {\n                        if (chd[idx].adom().getId() === this.adom().getId()) {\n                            this.parent().delChild(parseInt(idx)); // separated from parent\n                            break;\n                        }\n                    }\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'initDomContsCtl',\n        value: function initDomContsCtl() {\n            try {\n                if (false === this.isInitDom()) {\n                    this.adom(new mofron.Adom());\n                    this.adom().component(this);\n                    /*** initialize dom contents ***/\n                    if (null === this.param()) {\n                        /* this component is no parameter */\n                        this.initDomConts();\n                    } else {\n                        var cmp_p = this.param();\n                        /* call init function with parameters specified */\n                        if (1 === cmp_p.length) {\n                            this.initDomConts(cmp_p[0]);\n                        } else if (2 === cmp_p.length) {\n                            this.initDomConts(cmp_p[0], cmp_p[1]);\n                        } else if (3 === cmp_p.length) {\n                            this.initDomConts(cmp_p[0], cmp_p[1], cmp_p[2]);\n                        } else {\n                            throw new Error('too many component parameters');\n                        }\n                    }\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'initDomConts',\n        value: function initDomConts(prm) {\n            try {\n                this.adom().addChild(new mofron.Dom('string' === typeof prm ? prm : 'div', this));\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'isInitDom',\n        value: function isInitDom() {\n            try {\n                return null === this.m_adom ? false : true;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'visible',\n        value: function visible(flg) {\n            try {\n                if (undefined === flg) {\n                    /* getter */\n                    return false === this.isInitDom() || 'none' === this.adom().style('display') ? false : true;\n                }\n                /* setter */\n                if ('boolean' !== typeof flg) {\n                    throw new Error('invalid parameter');\n                }\n\n                if (true === flg) {\n                    if ('none' === this.adom().style('display')) {\n                        this.adom().style({ 'display': null });\n                    }\n                } else {\n                    this.adom().style({ 'display': 'none' });\n                }\n\n                if (null === this.parent()) {\n                    if (false === this.adom().isPushed()) {\n                        this.render();\n                    }\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'vdom',\n        value: function vdom(vd) {\n            return this.adom(vd);\n        }\n\n        /**\n         * agent dom setter / getter\n         * \n         * @return (object) adom object\n         */\n\n    }, {\n        key: 'adom',\n        value: function adom(ad, rdf) {\n            try {\n                if (undefined === ad) {\n                    /* getter */\n                    if (null === this.m_adom) {\n                        this.initDomContsCtl();\n                    }\n                    return this.m_adom;\n                }\n                /* setter */\n                if (false === mofron.func.isInclude(ad, 'Dom')) {\n                    throw new Error('invalid parameter : ' + (typeof ad === 'undefined' ? 'undefined' : _typeof(ad)));\n                }\n                this.m_adom = ad;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'size',\n        value: function size(x, y) {\n            try {\n                if (undefined === x) {\n                    /* getter */\n                    return [this.width(), this.height()];\n                }\n                /* setter */\n                this.width(x);\n                this.height(y);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'width',\n        value: function width(x) {\n            try {\n                if (undefined === x) {\n                    /* getter */\n                    return mofron.func.getLength(this.style('width'));\n                }\n                /* setter */\n                this.style({\n                    'width': 'number' === typeof x ? x + 'px' : x\n                });\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'height',\n        value: function height(y) {\n            try {\n                if (undefined === y) {\n                    /* getter */\n                    return mofron.func.getLength(this.style('height'));\n                }\n                /* setter */\n                this.style({\n                    'height': 'number' === typeof y ? y + 'px' : y\n                });\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'color',\n        value: function color(val) {\n            try {\n                if (undefined === val) {\n                    /* getter */\n                    return undefined === this.m_color ? null : this.m_color;\n                }\n                /* setter */\n                if (true !== mofron.func.isInclude(val, 'Color')) {\n                    throw new Error('invalid parameter');\n                }\n                this.style({\n                    'background': val.getStyle()\n                });\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'execOption',\n        value: function execOption(opt) {\n            try {\n                this.adom();\n                opt = undefined === opt ? this.getOption() : opt;\n                if (null === opt) {\n                    return;\n                }\n                if (undefined !== opt.theme) {\n                    this.theme(opt.theme);\n                    delete opt.theme;\n                }\n                _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'execOption', this).call(this, opt);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.Base);\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron/src/core/Component.js?")},"./node_modules/mofron/src/core/Effect.js":
/*!************************************************!*\
  !*** ./node_modules/mofron/src/core/Effect.js ***!
  \************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file effect/Base.js\n */\n\nmofron.Effect = function (_mofron$CompConf) {\n    _inherits(_class, _mofron$CompConf);\n\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, po));\n\n            _this.name('Effect');\n            _this.m_cb = new Array(null, /* function */\n            null /* parameter */\n            );\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'execute',\n        value: function execute(flg) {\n            try {\n                if (true === this.ignore()) {\n                    return;\n                }\n\n                var _flg = flg === undefined ? true : flg;\n                if ('boolean' !== typeof _flg) {\n                    throw new Error('invalid paramter');\n                }\n\n                if (0 === this.speed()) {\n                    if (true === _flg) {\n                        this.enable(this.target());\n                        this.status(true);\n                    } else {\n                        this.disable(this.target());\n                        this.status(false);\n                    }\n                } else {\n                    /* init exec */\n                    if (true === _flg) {\n                        this.disable(this.target());\n                        this.status(false);\n                    } else {\n                        this.enable(this.target());\n                        this.status(true);\n                    }\n\n                    this.setConf(true);\n\n                    setTimeout(function (eff) {\n                        try {\n                            if (true === _flg) {\n                                eff.enable(eff.target());\n                                eff.status(true);\n                            } else {\n                                eff.disable(eff.target());\n                                eff.status(false);\n                            }\n                        } catch (e) {\n                            console.error(e.stack);\n                            throw e;\n                        }\n                    }, 200, this);\n                }\n\n                setTimeout(function (eff) {\n                    try {\n                        if (0 < eff.speed() && eff.getId() === eff.target().effect()[0].getId()) {\n                            eff.setConf(false);\n                        }\n                        if (null != eff.callback()[0]) {\n                            eff.callback()[0](eff.callback()[1]);\n                        }\n                    } catch (e) {\n                        console.error(e.stack);\n                        throw e;\n                    }\n                }, this.speed() * 1000, this);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'setConf',\n        value: function setConf(en) {\n            try {\n                if ('boolean' !== typeof en) {\n                    throw new Error('invalid paramter');\n                }\n                var adom = this.target().adom();\n                if (true === en) {\n                    adom.style({\n                        '-webkit-transition': 1000 * this.speed() + 'ms all linear 0s',\n                        '-moz-transition': 'all ' + 1000 * this.speed() + 'ms',\n                        '-ms-transition': 'all ' + 1000 * this.speed() + 'ms',\n                        '-o-transition': 'all ' + 1000 * this.speed() + 'ms',\n                        'transtion': 1000 * this.speed() + 'ms all linear 0s'\n                    });\n                } else {\n                    adom.style({\n                        '-webkit-transition': null,\n                        '-moz-transition': null,\n                        '-ms-transition': null,\n                        '-o-transition': null,\n                        'transtion': null\n                    });\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'enable',\n        value: function enable(tgt) {\n            console.warn('not implement');\n        }\n    }, {\n        key: 'disable',\n        value: function disable(tgt) {\n            console.warn('not implement');\n        }\n    }, {\n        key: 'status',\n        value: function status(sts) {\n            try {\n                if (undefined === sts) {\n                    /* getter */\n                    return undefined === this.m_sts ? false : this.m_sts;\n                }\n                /* setter */\n                if ('boolean' !== typeof sts) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_sts = sts;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'defStatus',\n        value: function defStatus(sts) {\n            try {\n                if (undefined === sts) {\n                    /* getter */\n                    return undefined === this.m_defsts ? true : this.m_defsts;\n                }\n                /* setter */\n                if ('boolean' !== typeof sts) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_defsts = sts;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'speed',\n        value: function speed(spd) {\n            try {\n                if (undefined === spd) {\n                    /* getter */\n                    return undefined === this.m_speed ? 0 : this.m_speed;\n                }\n                /* setter */\n                if ('number' != typeof spd) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_speed = spd;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'callback',\n        value: function callback(fnc, prm) {\n            try {\n                return this.confFunc(fnc, prm);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.CompConf);\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron/src/core/Effect.js?")},"./node_modules/mofron/src/core/Event.js":
/*!***********************************************!*\
  !*** ./node_modules/mofron/src/core/Event.js ***!
  \***********************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file event.js\n * @author simpart\n */\n\n/**\n * @class mofron.event.Base\n * @brief base class of event\n */\nmofron.Event = function (_mofron$CompConf) {\n    _inherits(_class, _mofron$CompConf);\n\n    /**\n     * initialize member\n     *\n     * @param fnc : (option) function for event listener\n     * @param prm : (option) function parameter\n     */\n    function _class(fnc, prm) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Event');\n\n            if ('function' === typeof fnc) {\n                _this.handler(fnc, prm);\n            } else {\n                _this.setPrmOpt(fnc);\n                _this.execOption(undefined === fnc || null === fnc ? {} : fnc);\n            }\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    /**\n     * set function for event listener\n     *\n     * @param fnc : (function) function for event listener\n     * @param prm : (mixed) function parameter (option)\n     */\n\n\n    _createClass(_class, [{\n        key: 'handler',\n        value: function handler(fnc, prm) {\n            try {\n                return this.confFunc(fnc, prm);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'execute',\n        value: function execute() {\n            try {\n                if (true !== this.ignore()) {\n                    this.eventConts(this.target().eventTgt());\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * this is interface function.\n         * extend class needs to implement this function.\n         */\n\n    }, {\n        key: 'eventConts',\n        value: function eventConts(tgt) {\n            try {\n                console.warn('not implement');\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.CompConf);\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron/src/core/Event.js?")},"./node_modules/mofron/src/core/Layout.js":
/*!************************************************!*\
  !*** ./node_modules/mofron/src/core/Layout.js ***!
  \************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file layout/Base.js\n * @brief Base class of layout\n */\n\nmofron.Layout = function (_mofron$CompConf) {\n    _inherits(_class, _mofron$CompConf);\n\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, po));\n\n            _this.name('Layout');\n            _this.m_execnt = 0;\n\n            var opt = _this.getOption();\n            if (null !== opt) {\n                _this.execOption(opt);\n            }\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'execute',\n        value: function execute() {\n            try {\n                if (true === this.ignore()) {\n                    return;\n                }\n                var tgt_chd = this.target().child();\n                var _idx = null;\n                var skip_flg = false;\n                for (var idx in tgt_chd) {\n                    _idx = parseInt(idx);\n                    if (_idx < this.m_execnt) {\n                        continue;\n                    }\n                    /* check skip */\n                    var skip = this.skipTarget();\n                    skip_flg = false;\n                    for (var sidx in skip) {\n                        if (tgt_chd[_idx].getId() === skip[sidx]) {\n                            skip_flg = true;\n                            break;\n                        }\n                    }\n\n                    if (false === skip_flg) {\n                        this.layoutConts(_idx, tgt_chd[_idx]);\n                    }\n                    this.m_execnt++;\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'layoutConts',\n        value: function layoutConts(idx, tgt) {\n            try {\n                console.warn('layout is not implements');\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'skipTarget',\n        value: function skipTarget(id) {\n            try {\n                if (undefined === id) {\n                    /* getter */\n                    return this.skipTargetElem();\n                }\n                /* setter */\n                if ('string' === typeof id) {\n                    this.skipTargetElem(id);\n                    return;\n                }\n                for (var sidx in id) {\n                    this.skipTargetElem(id[sidx]);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'skipTargetElem',\n        value: function skipTargetElem(id) {\n            try {\n                if (undefined === id) {\n                    /* getter */\n                    return undefined === this.m_skip_tgt ? [] : this.m_skip_tgt;\n                }\n                /* setter */\n                if ('string' !== typeof id) {\n                    throw new Error('invalid parameter');\n                }\n                if (undefined === this.m_skip_tgt) {\n                    this.m_skip_tgt = new Array();\n                }\n                this.m_skip_tgt.push(id);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.CompConf);\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron/src/core/Layout.js?")},"./node_modules/mofron/src/util/Color.js":
/*!***********************************************!*\
  !*** ./node_modules/mofron/src/util/Color.js ***!
  \***********************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file  Color.js\n * @author simpart\n */\n\n/**\n * @class Color\n * @brief Color Defined Class\n */\nmofron.Color = function (_mofron$Base) {\n    _inherits(_class, _mofron$Base);\n\n    /**\n     * initialize member\n     *\n     * @param r : (number 0-255) red value (option)\n     * @param g : (number 0-255) green value (option)\n     * @param b : (number 0-255) blue alue (option)\n     * @param a : (number 0-1)   alpha value (option)\n     */\n    function _class(r, g, b, a) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Color');\n\n            _this.m_rgba = new Array(null, /* red */\n            null, /* green */\n            null, /* blue */\n            null /* alpha */\n            );\n            _this.rgba(r, g, b, a);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    /**\n     * get rgba value\n     * \n     * @return (object) rgba array object\n     *   [0] -> (number) red value\n     *   [1] -> (number) green value\n     *   [2] -> (number) blue value\n     *   [3] -> (number) alpha value\n     */\n\n\n    _createClass(_class, [{\n        key: 'rgba',\n        value: function rgba(red, green, blue, alpha) {\n            try {\n                if (undefined === red) {\n                    /* getter */\n                    return this.m_rgba;\n                }\n                /* setter */\n                var _red = red === undefined ? null : red;\n                var _green = green === undefined ? null : green;\n                var _blue = blue === undefined ? null : blue;\n                var _alpha = alpha === undefined ? 1 : alpha;\n\n                if (null === _red && null === _green && null === _blue) {} else if (null !== _red && null !== _green && null !== _blue) {\n                    if ('number' !== typeof _red || 'number' !== typeof _green || 'number' !== typeof _blue) {\n                        throw new Error('invalid parameter');\n                    }\n                } else {\n                    throw new Error('invalid parameter');\n                }\n\n                if ('number' !== typeof _alpha) {\n                    throw new Error('invalid parameter');\n                }\n\n                this.m_rgba[0] = _red;\n                this.m_rgba[1] = _green;\n                this.m_rgba[2] = _blue;\n                this.m_rgba[3] = _alpha;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * get coloe style value\n         *\n         * @return (string) rgba(x,x,x,x)\n         * @return (string) none\n         * @note return 'none' if rgb is null.\n         */\n\n    }, {\n        key: 'getStyle',\n        value: function getStyle() {\n            try {\n                var rgba = this.rgba();\n                var red = rgba[0];\n                var green = rgba[1];\n                var blue = rgba[2];\n                var alpha = rgba[3];\n\n                if (null === red && null === green && null === blue) {\n                    return 'none';\n                }\n                return 'rgba(' + red + ',' + green + ',' + blue + ',' + alpha + ')';\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.Base);\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron/src/util/Color.js?")},"./node_modules/mofron/src/util/CompCtrl.js":
/*!**************************************************!*\
  !*** ./node_modules/mofron/src/util/CompCtrl.js ***!
  \**************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file CompCtrl.js\n * @brief component controller\n * @author simparts\n */\n\nmofron.CompCtrl = function (_mofron$Base) {\n    _inherits(_class, _mofron$Base);\n\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n        _this.name('CompCtrl');\n        _this.prmOpt(po);\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'addCtrl',\n        value: function addCtrl(key, fnc, prm) {\n            try {\n                this.data(key, [fnc, prm]);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'execCtrl',\n        value: function execCtrl(key) {\n            try {\n                var ctl = this.data(key);\n                if (null !== ctl) {\n                    return ctl[0](this, this.m_data, ctl[1]);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'setComponent',\n        value: function setComponent(key, cmp) {\n            try {\n                this.data(key, cmp);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'addComponent',\n        value: function addComponent(key, cmp) {\n            try {\n                var chk = this.data(key);\n                if (null === chk) {\n                    if (true === mofron.func.isInclude(cmp, 'Component')) {\n                        this.data(key, [cmp]);\n                    } else {\n                        this.data(key, cmp);\n                    }\n                } else if (true === mofron.func.isInclude(chk, 'Component')) {\n                    if (true === mofron.func.isInclude(cmp, 'Component')) {\n                        this.data(key, [chk, cmp]);\n                    } else {\n                        var set_cmp = new Array(chk);\n                        this.data(key, set_cmp.concat(cmp));\n                    }\n                } else if ('array' === typeof chk) {\n                    if (true === mofron.func.isInclude(cmp, 'Component')) {\n                        this.data(key, chk.push(cmp));\n                    } else {\n                        this.data(key, chk.concat(cmp));\n                    }\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'getComponent',\n        value: function getComponent(key) {\n            try {\n                return this.data(key);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'getCompValue',\n        value: function getCompValue(key) {\n            try {\n                var cmp = this.data(key);\n                if (null === cmp) {\n                    return null;\n                }\n                if (true === mofron.func.isInclude(cmp, 'Component')) {\n                    return cmp.value();\n                }\n                if (undefined !== cmp[0]) {\n                    var ret = new Array();\n                    for (var idx in cmp) {\n                        ret.push(cmp[idx].value());\n                    }\n                    return ret;\n                }\n                throw new Error('unknown data type');\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.Base);\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron/src/util/CompCtrl.js?")},"./node_modules/mofron/src/util/Font.js":
/*!**********************************************!*\
  !*** ./node_modules/mofron/src/util/Font.js ***!
  \**********************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file  Font.js\n * @author simpart\n */\n\n/**\n * @class Font\n * @brief Font Defined Class\n */\nmofron.Font = function (_mofron$Base) {\n    _inherits(_class, _mofron$Base);\n\n    /**\n     * initialize font\n     *\n     * @param fnt : (string) font name\n     */\n    function _class(fnt, pth) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Font');\n\n            /* check parameter */\n            var _pth = pth === undefined ? null : pth;\n            if ('string' !== typeof fnt) {\n                throw new Error('invalid parameter');\n            }\n\n            /* initialize member */\n            _this.m_family = {};\n            _this.m_class = 'mofron-theme-' + mofron.func.getId(_this);\n            _this.m_theme = false;\n\n            /* initialize function */\n            _this.family(fnt);\n            if (null !== _pth) {\n                _this.setFace(fnt, _pth);\n            }\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    /**\n     * set @font-face\n     * \n     * @param fnt : (string) font name\n     * @param pth : (string) path to font file\n     */\n\n\n    _createClass(_class, [{\n        key: 'setFace',\n        value: function setFace(fnt, pth) {\n            try {\n                if ('string' !== typeof pth || 'string' !== typeof fnt) {\n                    throw new Error('invalid parameter');\n                }\n\n                /* format */\n                var pth_spt = pth.split('.');\n                var format = '';\n                if ('woff' === pth_spt[pth_spt.length - 1]) {\n                    format = \"format('woff')\";\n                } else if ('ttf' === pth_spt[pth_spt.length - 1]) {\n                    format = \"format('truetype')\";\n                } else if ('otf' === pth_spt[pth_spt.length - 1]) {\n                    format = \"format('opentype')\";\n                } else if ('eot' === pth_spt[pth_spt.length - 1]) {\n                    format = \"format('embedded-opentype')\";\n                } else if ('svg' === pth_spt[pth_spt.length - 1] || 'svgz' === pth_spt[pth_spt.length - 1]) {\n                    format = \"format('svg')\";\n                }\n\n                var style = {\n                    'font-family': fnt,\n                    'src': \"url('\" + pth + \"') \" + format\n                };\n                mofron.func.addHeadConts({\n                    tag: 'style',\n                    contents: mofron.func.getStyleConts('@font-face', style)\n                });\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'family',\n        value: function family(fm) {\n            try {\n                if (undefined === fm) {\n                    /* getter */\n                    var ret_val = new Array();\n                    for (var idx in this.m_family) {\n                        ret_val.push(idx);\n                    }\n                    return ret_val;\n                }\n                /* setter */\n                if ('string' !== typeof fm) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_family[fm] = null;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'getFamilyStyle',\n        value: function getFamilyStyle() {\n            try {\n                var fm = this.family();\n                var fm_str = '';\n                for (var idx in fm) {\n                    if ('' !== fm_str) {\n                        fm_str += ',';\n                    }\n                    fm_str += fm[idx];\n                }\n                return fm_str;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * set own font style to style tag.\n         */\n\n    }, {\n        key: 'pushTheme',\n        value: function pushTheme() {\n            try {\n                if (true === this.m_theme) {\n                    return;\n                }\n                var style = {\n                    'font-family': this.getFamilyStyle()\n                };\n                mofron.func.addHeadConts({\n                    tag: 'style',\n                    contents: mofron.func.getStyleConts('.' + this.m_class, { 'font-family': this.getFamilyStyle() })\n                });\n                this.m_theme = true;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'className',\n        value: function className(cls) {\n            try {\n                if (undefined === cls) {\n                    /* getter */\n                    return this.m_class;\n                }\n                /* setter */\n                if ('string' !== typeof cls) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_class = cls;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * set font-family style to target component\n         * \n         * @param (object) : target object\n         */\n\n    }, {\n        key: 'setFont',\n        value: function setFont(tgt) {\n            try {\n                var _tgt = tgt === undefined ? null : tgt;\n                if (null === _tgt || 'object' !== (typeof _tgt === 'undefined' ? 'undefined' : _typeof(_tgt))) {\n                    throw new Error('invalid parameter');\n                }\n\n                if (true === this.m_theme) {\n                    tgt.target().className(this.className());\n                } else {\n                    tgt.style('font-family', this.getFamilyStyle());\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.Base);\nmofron.font = {};\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron/src/util/Font.js?")},"./node_modules/mofron/src/util/Theme.js":
/*!***********************************************!*\
  !*** ./node_modules/mofron/src/util/Theme.js ***!
  \***********************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file theme.js\n * @author simpart\n */\n/**\n * @class mofron.theme\n * @brief theme defined class\n */\nmofron.Theme = function (_mofron$Base) {\n    _inherits(_class, _mofron$Base);\n\n    /**\n     * initialize member\n     */\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, po));\n\n            _this.name('Theme');\n            _this.m_conts = {};\n            _this.execOption();\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'target',\n        value: function target(tgt) {\n            try {\n                if (undefined === tgt) {\n                    /* getter */\n                    return undefined === this.m_target ? null : this.m_target;\n                }\n                /* setter */\n                if (false === mofron.func.isInclude(tgt, 'Component')) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_target = tgt;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'override',\n        value: function override(flg) {\n            try {\n                if (undefined === flg) {\n                    /* getter */\n                    return undefined === this.m_over ? true : this.m_over;\n                }\n                /* setter */\n                if ('boolean' !== typeof flg) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_over = flg;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * set theme contents\n         * \n         * @param thm : (mofron.theme object) theme\n         */\n\n    }, {\n        key: 'setTheme',\n        value: function setTheme(thm) {\n            try {\n                if (false === mofron.func.isObject(thm, 'Theme')) {\n                    throw new Error('invalid parameter');\n                }\n                var thm_cnt = thm.get();\n                var set_flg = false;\n                for (var cnt_key in thm_cnt) {\n                    for (var idx in thm_cnt[cnt_key]) {\n                        var _idx = parseInt(idx);\n                        if (null === thm_cnt[cnt_key][_idx]) {\n                            /* skip null contents */\n                            continue;\n                        }\n\n                        if (false === this.override() && null !== this.get(cnt_key, _idx)) {\n                            continue;\n                        }\n\n                        this.set(cnt_key, thm_cnt[cnt_key][_idx], _idx);\n                        set_flg = true;\n                    }\n                }\n                if (null === this.target()) {\n                    throw new Error('could not find target component');\n                }\n                this.target().themeConts(this);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'style',\n        value: function style(kv, idx) {\n            try {\n                if (undefined === kv || 'number' === typeof kv) {\n                    /* getter */\n                    return this.get('Style', kv);\n                }\n                /* setter */\n                if ('object' !== (typeof kv === 'undefined' ? 'undefined' : _typeof(kv))) {\n                    throw new Error('invalid parameter');\n                }\n                var style = this.get('Style');\n                for (var kv_idx in kv) {\n                    style[kv_idx] = kv[kv_idx];\n                }\n                this.set('Style', style, idx, false);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'color',\n        value: function color(clr, idx) {\n            try {\n                if (undefined === clr || 'number' === typeof clr) {\n                    /* getter */\n                    return this.get('Color', clr);\n                }\n                /* setter */\n                if (false === mofron.func.isObject(clr, 'Color')) {\n                    if ('object' === (typeof clr === 'undefined' ? 'undefined' : _typeof(clr)) && undefined !== clr[0]) {\n                        for (var clr_idx in clr) {\n                            this.color(clr[clr_idx], parseInt(clr_idx));\n                        }\n                        return;\n                    }\n                    throw new Error('invalid parameter');\n                }\n                this.set('Color', clr, idx);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'component',\n        value: function component(key, cmp, po) {\n            try {\n                if (undefined === cmp) {\n                    /* getter */\n                    var thm_cmp = this.get(key, 0);\n                    if (null !== thm_cmp) {\n                        return undefined === thm_cmp[1] ? new thm_cmp[0]() : new thm_cmp[0](thm_cmp[1]);\n                    }\n                    return null;\n                }\n                /* setter */\n                if ('function' !== typeof cmp) {\n                    throw new Error('invalid parameter');\n                }\n                this.set(key, [cmp, po], 0);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'font',\n        value: function font(fnt, idx) {\n            try {\n                if (undefined === fnt || 'number' == typeof fnt) {\n                    /* getter */\n                    return this.get('Font', fnt);\n                }\n                /* setter */\n                if (false === mofron.func.isInclude(fnt, 'Font')) {\n                    if ('object' === (typeof fnt === 'undefined' ? 'undefined' : _typeof(fnt)) && undefined !== fnt[0]) {\n                        for (var fnt_idx in fnt) {\n                            this.font(fnt[fnt_idx], parseInt(fnt_idx));\n                        }\n                        return;\n                    }\n                    throw new Error('invalid parameter');\n                }\n                fnt.pushTheme();\n                this.set('Font', fnt, idx);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * get theme contents\n         * \n         * @param key : (string) theme identify key (option)\n         * @param idx : (number) get index (option)\n         * @return (object) theme value\n         */\n\n    }, {\n        key: 'get',\n        value: function get(key, idx) {\n            try {\n                if (undefined === key) {\n                    return this.m_conts;\n                } else if ('string' !== typeof key) {\n                    throw new Error('invalid parameter');\n                }\n\n                var _idx = undefined === idx ? null : idx;\n                if (null === _idx) {\n                    return undefined === this.m_conts[key] ? null : this.m_conts[key];\n                } else {\n                    if (undefined === this.m_conts[key]) {\n                        return null;\n                    }\n                    return undefined === this.m_conts[key][_idx] ? null : this.m_conts[key][_idx];\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * set theme contents\n         * \n         * @param key  : (string) theme contetent key\n         * @param val  : (object) theme element\n         * @param idx  : (number) set index\n         */\n\n    }, {\n        key: 'set',\n        value: function set(key, val, idx) {\n            try {\n                var _val = val === undefined ? null : val;\n                var _idx = idx === undefined ? 0 : idx;\n\n                if ('string' !== typeof key || null === _val || 'number' !== typeof _idx || 0 > _idx) {\n                    throw new Error('invalid parameter');\n                }\n\n                if (undefined === this.m_conts[key]) {\n                    this.m_conts[key] = new Array();\n                }\n\n                var loop = 0;\n                var set_flg = false;\n                for (; loop < 10; loop++) {\n                    if (_idx === this.m_conts[key].length) {\n                        this.m_conts[key].push(val);\n                        set_flg = true;\n                        break;\n                    } else if (_idx < this.m_conts[key].length) {\n                        this.m_conts[key][_idx] = val;\n                        set_flg = true;\n                        break;\n                    } else {\n                        this.m_conts[key].push(null);\n                    }\n                }\n                if (false === set_flg) {\n                    throw new Error('invalid parameter');\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * remove theme value\n         *\n         * @param key : (string) theme identify key\n         * @param idx : (number) remove index\n         */\n\n    }, {\n        key: 'del',\n        value: function del(key, idx) {\n            try {\n                if (undefined === this.m_conts[key][idx]) {\n                    throw new Error('invalid parameter');\n                }\n\n                var cnt = 0;\n                for (var cnt_key in this.m_conts) {\n                    if (cnt_key === key) {\n                        this.m_conts[cnt_key].splice(idx, 1);\n                        if (0 === this.m_conts[cnt_key].length) {\n                            this.m_conts.splice(cnt, 1);\n                        }\n                        return;\n                    }\n                    cnt++;\n                }\n\n                throw new Error('invalid parameter');\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.Base);\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron/src/util/Theme.js?")},"./node_modules/mofron/src/util/conf/Attr.js":
/*!***************************************************!*\
  !*** ./node_modules/mofron/src/util/conf/Attr.js ***!
  \***************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file Attr.js\n * @author simpart\n */\n\n/**\n * @class Attr\n * @brief tag attribute object\n */\nmofron.Attr = function (_mofron$DomConf) {\n    _inherits(_class, _mofron$DomConf);\n\n    /**\n     * initialize member\n     *\n     * @param tgt : (object) target adom object\n     */\n    function _class(tgt) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, tgt));\n\n            _this.name('Attr');\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    /**\n     * set style\n     *\n     * @param key : (string) style key\n     * @param val : (string) style value\n     */\n\n\n    _createClass(_class, [{\n        key: 'rset',\n        value: function rset(key, val) {\n            try {\n                this.target().getRawDom().setAttribute(key, val);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'rrem',\n        value: function rrem(key) {\n            try {\n                this.target().getRawDom().removeAttribute(key);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * get attribute value from rawdom\n         *\n         * @param key : (string) style key\n         * @return (object) style contents\n         * @return (string) style contents value\n         */\n\n    }, {\n        key: 'rget',\n        value: function rget(key) {\n            try {\n                var val = this.target().getRawDom().getAttribute(key);\n                return '' === val ? null : val;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'getString',\n        value: function getString() {\n            try {\n                var ret_val = '';\n                for (var idx in this.m_conts) {\n                    if ('' !== ret_val) {\n                        ret_val += ' ';\n                    }\n                    ret_val += null === this.m_conts[idx] ? idx : idx + '=\"' + this.m_conts[idx] + '\"';\n                }\n                return ret_val;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.DomConf);\n\n//# sourceURL=webpack:///./node_modules/mofron/src/util/conf/Attr.js?")},"./node_modules/mofron/src/util/conf/ClassName.js":
/*!********************************************************!*\
  !*** ./node_modules/mofron/src/util/conf/ClassName.js ***!
  \********************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file ClassName.js\n * @author simpart\n */\n\n/**\n * @class ClassName\n * @brief classname for tag object\n */\nmofron.ClassName = function (_mofron$DomConf) {\n    _inherits(_class, _mofron$DomConf);\n\n    /**\n     * initialize member\n     *\n     * @param tgt : (object) target adom object\n     */\n    function _class(tgt) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, tgt));\n\n            _this.name('ClassName');\n            _this.protect(true);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'add',\n        value: function add(nm) {\n            try {\n                var set_obj = {};\n                set_obj[nm] = \"\";\n                this.set(set_obj);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'get',\n        value: function get() {\n            try {\n                var ret_val = _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'get', this).call(this);\n                if (null === ret_val) {\n                    return null;\n                } else if (undefined === ret_val[0]) {\n                    var ret_obj = new Array();\n                    for (var idx in ret_val) {\n                        ret_obj.push(idx);\n                    }\n                    return ret_obj;\n                } else {\n                    return ret_val;\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * set class name to rowdom\n         *\n         * @param key : (string) style key\n         * @param val : (string) style value\n         */\n\n    }, {\n        key: 'rset',\n        value: function rset(key, val) {\n            try {\n                this.target().getRawDom().classList.add(key);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'rrem',\n        value: function rrem(key) {\n            try {\n                this.target().getRawDom().classList.remove(key);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * get class name from rawdom\n         *\n         * @param key : unused\n         * @return (object) style contents\n         * @return (string) style contents value\n         */\n\n    }, {\n        key: 'rget',\n        value: function rget(key) {\n            try {\n                var clnm = this.target().getRawDom().className;\n                if (undefined === clnm || null === clnm || '' === clnm) {\n                    return null;\n                }\n                return clnm.split(' ');\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'getString',\n        value: function getString() {\n            try {\n                var ret_val = '';\n                var conts = this.get();\n                for (var idx in conts) {\n                    if ('' !== ret_val) {\n                        ret_val += ' ';\n                    }\n                    ret_val += conts[idx];\n                }\n                if ('' === ret_val) {\n                    return '';\n                }\n                return 'class=\"' + ret_val + '\"';\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.DomConf);\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron/src/util/conf/ClassName.js?")},"./node_modules/mofron/src/util/conf/CompConf.js":
/*!*******************************************************!*\
  !*** ./node_modules/mofron/src/util/conf/CompConf.js ***!
  \*******************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file CompConf.js\n * @author simpart\n */\n/**\n * @class CompConf\n * @brief Interface of Component Config\n */\nmofron.CompConf = function (_mofron$Base) {\n    _inherits(_class, _mofron$Base);\n\n    function _class(po) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, po));\n\n            _this.name('CompConf');\n            _this.m_func = new Array(null, null);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'target',\n        value: function target(tgt) {\n            try {\n                if (undefined === tgt) {\n                    /* getter */\n                    return undefined === this.m_target ? null : this.m_target;\n                }\n                /* setter */\n                if (false === mofron.func.isInclude(tgt, 'Component')) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_target = tgt;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'execute',\n        value: function execute() {\n            console.warn('not implement');\n        }\n    }, {\n        key: 'confFunc',\n        value: function confFunc(fnc, prm) {\n            try {\n                if (undefined === fnc) {\n                    /* getter */\n                    return this.m_func;\n                }\n                /* setter */\n                if ('function' !== typeof fnc) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_func[0] = fnc;\n                this.m_func[1] = undefined === prm ? null : prm;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'ignore',\n        value: function ignore(flg) {\n            try {\n                if (undefined === flg) {\n                    /* getter */\n                    return undefined === this.m_cpcf_ign ? false : this.m_cpcf_ign;\n                }\n                /* setter */\n                if ('boolean' !== typeof flg) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_cpcf_ign = flg;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.Base);\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron/src/util/conf/CompConf.js?")},"./node_modules/mofron/src/util/conf/DomConf.js":
/*!******************************************************!*\
  !*** ./node_modules/mofron/src/util/conf/DomConf.js ***!
  \******************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file DomConf.js\n * @author simpart\n */\n\n/**\n * @class DomConf\n * @brief key-val manage for dom object\n */\nmofron.DomConf = function (_mofron$Base) {\n    _inherits(_class, _mofron$Base);\n\n    function _class(tgt) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('DomConf');\n            _this.m_conts = {};\n            _this.target(tgt);\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    _createClass(_class, [{\n        key: 'target',\n        value: function target(tgt) {\n            try {\n                if (undefined === tgt) {\n                    /* getter */\n                    return undefined === this.m_target ? null : this.m_target;\n                }\n                /* setter */\n                if (false === mofron.func.isInclude(tgt, 'Dom')) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_target = tgt;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'set',\n        value: function set(kv) {\n            try {\n                if (undefined === kv || 'object' !== (typeof kv === 'undefined' ? 'undefined' : _typeof(kv))) {\n                    throw new Error('invalid parameter');\n                }\n\n                for (var idx in kv) {\n                    if (true === this.protect() && undefined !== this.m_conts[idx]) {\n                        return;\n                    }\n\n                    if (null !== kv[idx]) {\n                        /* set config */\n                        this.m_conts[idx] = kv[idx];\n                    } else {\n                        /* delete config */\n                        if (undefined !== this.m_conts[idx]) {\n                            delete this.m_conts[idx];\n                        }\n                    }\n                    if (true === this.target().isPushed()) {\n                        /* target is already rendered */\n                        if (null !== kv[idx]) {\n                            this.rset(idx, kv[idx]);\n                        } else {\n                            this.rrem(idx);\n                        }\n                    }\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'get',\n        value: function get(key) {\n            try {\n                if (false === this.target().isPushed()) {\n                    if (undefined === key) {\n                        return this.m_conts;\n                    }\n                    return undefined === this.m_conts[key] ? null : this.m_conts[key];\n                } else {\n                    /* target is already rendered */\n                    return undefined == this.rget(key) ? null : this.rget(key);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'rrem',\n        value: function rrem() {\n            try {\n                console.warn('not implement');\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'rset',\n        value: function rset() {\n            try {\n                console.warn('not implement');\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'rget',\n        value: function rget() {\n            try {\n                console.warn('not implement');\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'protect',\n        value: function protect(prt) {\n            try {\n                if (undefined === prt) {\n                    /* getter */\n                    return undefined === this.m_protect ? false : this.m_protect;\n                }\n                /* setter */\n                if ('boolean' !== typeof prt) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_protect = prt;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.Base);\n/* end of file */\n\n//# sourceURL=webpack:///./node_modules/mofron/src/util/conf/DomConf.js?")},"./node_modules/mofron/src/util/conf/Prop.js":
/*!***************************************************!*\
  !*** ./node_modules/mofron/src/util/conf/Prop.js ***!
  \***************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file Prop.js\n * @author simpart\n */\n\n/**\n * @class Prop\n * @brief dom property object\n */\nmofron.Prop = function (_mofron$DomConf) {\n    _inherits(_class, _mofron$DomConf);\n\n    /**\n     * initialize member\n     *\n     * @param tgt : (object) target dom object\n     */\n    function _class(tgt) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, tgt));\n\n            _this.name(\'Prop\');\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    /**\n     * set property\n     *\n     * @param key : (string) property key\n     * @param val : (string) property value\n     */\n\n\n    _createClass(_class, [{\n        key: \'rset\',\n        value: function rset(key, val) {\n            try {\n                if (undefined === this.target().getRawDom()[key]) {\n                    throw new Error(key + \' is unknown property\');\n                }\n                this.target().getRawDom()[key] = val;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: \'rrem\',\n        value: function rrem(key) {\n            try {\n                if (undefined === this.target().getRawDom()[key]) {\n                    return;\n                }\n                delete this.target().getRawDom()[key];\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * get property value from rawdom\n         *\n         * @param key : (string) property key\n         * @return (string) property value\n         */\n\n    }, {\n        key: \'rget\',\n        value: function rget(key) {\n            try {\n                return this.target().getRawDom()[key];\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.DomConf);\n\n//# sourceURL=webpack:///./node_modules/mofron/src/util/conf/Prop.js?')},"./node_modules/mofron/src/util/conf/Style.js":
/*!****************************************************!*\
  !*** ./node_modules/mofron/src/util/conf/Style.js ***!
  \****************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file Style.js\n * @author simpart\n */\n\n/**\n * @class Style\n * @brief component style class\n */\nmofron.Style = function (_mofron$DomConf) {\n    _inherits(_class, _mofron$DomConf);\n\n    /**\n     * initialize member\n     *\n     * @param tgt : (object) target adom object\n     */\n    function _class(tgt) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, tgt));\n\n            _this.name('Style');\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    /**\n     * set style\n     *\n     * @param key : (string) style key\n     * @param val : (string) style value\n     */\n\n\n    _createClass(_class, [{\n        key: 'rset',\n        value: function rset(key, val) {\n            try {\n                this.target().getRawDom().style[mofron.func.getCamel(key)] = val;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * get style value from rawdom\n         *\n         * @param key : (string) style key\n         * @return (object) style contents\n         * @return (string) style contents value\n         */\n\n    }, {\n        key: 'rget',\n        value: function rget(key) {\n            try {\n                var val = this.target().getRawDom().style[key];\n                return undefined === val ? null : val;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'rrem',\n        value: function rrem(key) {\n            try {\n                this.target().getRawDom().style[key] = \"\";\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'getString',\n        value: function getString() {\n            try {\n                var ret_val = '';\n                for (var idx in this.m_conts) {\n                    ret_val += idx + ':' + this.m_conts[idx] + ';';\n                }\n                if ('' === ret_val) {\n                    return '';\n                }\n                return 'style=\"' + ret_val + '\"';\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.DomConf);\n\n//# sourceURL=webpack:///./node_modules/mofron/src/util/conf/Style.js?")},"./node_modules/mofron/src/util/dom/Adom.js":
/*!**************************************************!*\
  !*** ./node_modules/mofron/src/util/dom/Adom.js ***!
  \**************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file Adom.js\n * @author simpart\n */\n\n/**\n * @class Adom\n * @brief agent dom class\n */\nmofron.Adom = function (_mofron$Dom) {\n    _inherits(_class, _mofron$Dom);\n\n    /**\n     * initialize member\n     *\n     * @param tag : (string) tag name\n     * @param cmp : (object) component object\n     */\n    function _class() {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Adom');\n            _this.m_style = {};\n            _this.m_classnm = {};\n            _this.m_attr = {};\n            _this.m_prop = {};\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    /**\n     * tag name setter / getter to(from) children\n     * \n     * @param tg : (string) tag name (option)\n     * @return (string,null) tag name\n     */\n\n\n    _createClass(_class, [{\n        key: 'tag',\n        value: function tag(tg) {\n            try {\n                if (undefined === tg) {\n                    /* getter */\n                    return null === this.parent() ? null : this.parent().tag();\n                }\n                throw new Error('tag set is not supported at adom');\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'addChild',\n        value: function addChild(chd, idx) {\n            try {\n                if (true === mofron.func.isObject(chd, 'Dom')) {\n                    /* set config */\n                    chd.attr(this.attr());\n                    chd.style(this.style());\n                    chd.prop(this.prop());\n                    chd.className('' === this.className() ? undefined : this.className());\n                    chd.text('' === this.text() ? undefined : this.text());\n                }\n                _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'addChild', this).call(this, chd, idx);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * style setter / getter to(from) children\n         *\n         * @param kv : (object) key value object\n         * @param los : (boolean) loose flag (not require)\n         * @return (string) : style value\n         * @return (object) : style object\n         */\n\n    }, {\n        key: 'style',\n        value: function style(kv, los) {\n            try {\n                if (undefined === kv) {\n                    /* getter */\n                    return this.m_style;\n                }\n                if ('string' === typeof kv) {\n                    /* getter */\n                    return undefined === this.m_style[kv] ? null : this.m_style[kv];\n                }\n                /* setter */\n                var chd = this.child();\n                for (var idx in chd) {\n                    chd[idx].style(kv, los);\n                }\n                for (var idx in kv) {\n                    this.m_style[idx] = kv[idx];\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * tag attribute setter / getter\n         *\n         * @param kv : (object) key value object\n         * @return (string,null) attribute value \n         */\n\n    }, {\n        key: 'attr',\n        value: function attr(kv, val) {\n            try {\n                if ('object' === (typeof kv === 'undefined' ? 'undefined' : _typeof(kv))) {\n                    for (var idx in kv) {\n                        this.m_attr[idx] = kv[idx];\n                    }\n                    var chd = this.child();\n                    for (var idx in chd) {\n                        chd[idx].attr(kv, val);\n                    }\n                } else {\n                    if (undefined === kv) {\n                        return this.m_attr;\n                    }\n                    return undefined === this.m_attr[kv] ? null : this.m_attr[kv];\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * dom property setter / getter\n         * \n         * @param kv (object) key value object\n         * @param val (mix) property value\n         */\n\n    }, {\n        key: 'prop',\n        value: function prop(kv) {\n            try {\n                if ('object' === (typeof kv === 'undefined' ? 'undefined' : _typeof(kv))) {\n                    for (var idx in kv) {\n                        this.m_prop[idx] = kv[idx];\n                    }\n                    var chd = this.child();\n                    for (var idx in chd) {\n                        chd[idx].prop(kv);\n                    }\n                } else {\n                    if (undefined === kv) {\n                        return this.m_prop;\n                    }\n                    return undefined === this.m_prop[kv] ? null : this.m_prop[kv];\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * add tag class name\n         * \n         * @param name : (string) class name\n         */\n\n    }, {\n        key: 'className',\n        value: function className(name) {\n            try {\n                if (undefined === name) {\n                    /* getter */\n                    var ret_val = '';\n                    for (var idx in this.m_classnm) {\n                        if ('' === ret_val) {\n                            ret_val += ' ';\n                        }\n                        ret_val += this.m_classnm[idx];\n                    }\n                    return ret_val;\n                }\n                /* setter */\n                if ('string' !== typeof name) {\n                    throw new Error('invalid parameter');\n                }\n                var chd = this.child();\n                for (var idx in chd) {\n                    chd[idx].className(name);\n                }\n                this.m_classnm[name] = null;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * tag contents text setter / getter\n         * \n         * @param cnt : (string) tag contents (option)\n         * @return (string) tag contents\n         */\n\n    }, {\n        key: 'text',\n        value: function text(txt) {\n            try {\n                if (undefined === txt) {\n                    /* getter */\n                    return undefined === this.m_text ? '' : this.m_text;\n                }\n                /* setter */\n                if ('string' !== typeof txt) {\n                    throw new Error('invalid parameter');\n                }\n                var chd = this.child();\n                for (var idx in chd) {\n                    chd[idx].text(txt);\n                }\n                this.m_text = txt;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * get dom string\n         *\n         * @return (string) dom string\n         */\n\n    }, {\n        key: 'value',\n        value: function value(val) {\n            try {\n                if (undefined !== val) {\n                    return;\n                }\n\n                var ret_val = '';\n                /* get child value */\n                if (0 != this.child().length) {\n                    var chd = this.child();\n                    for (var idx in chd) {\n                        ret_val += chd[idx].value();\n                    }\n                }\n                return ret_val;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * update adom status\n         * \n         * @note update status also child adom\n         */\n\n    }, {\n        key: 'setPushed',\n        value: function setPushed() {\n            try {\n                /* set rawdom */\n                this.m_rawdom = null === this.parent() ? document.body : this.parent().getRawDom();\n\n                /* set property */\n                var prop = this.m_prop;\n                for (var idx in prop) {\n                    this.prop(idx, prop[idx]);\n                }\n\n                if (0 != this.child().length) {\n                    var chd = this.child();\n                    for (var idx in chd) {\n                        chd[idx].setPushed();\n                    }\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * get parent's  pushed dom object from blowser\n         *\n         * @return (object) raw dom object\n         */\n\n    }, {\n        key: 'getRawDom',\n        value: function getRawDom() {\n            try {\n                if (false === this.isPushed()) {\n                    throw new Error('this adom is not rendered yet');\n                }\n                return this.m_rawdom;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            try {\n                var chd = this.child();\n                for (var idx in chd) {\n                    chd[idx].destroy(); // delete rawdom\n                }\n\n                // delete parent relating\n                if (true === mofron.func.isObject(this.parent(), 'Dom')) {\n                    var pchd = this.parent().child();\n                    for (var pidx in pchd) {\n                        if (pchd[pidx].getId() === this.getId()) {\n                            this.parent().delChild(parseInt(pidx));\n                        }\n                    }\n                }\n                this.m_rawdom = null;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.Dom);\n\n//# sourceURL=webpack:///./node_modules/mofron/src/util/dom/Adom.js?")},"./node_modules/mofron/src/util/dom/Dom.js":
/*!*************************************************!*\
  !*** ./node_modules/mofron/src/util/dom/Dom.js ***!
  \*************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file Dom.js\n * @author simpart\n */\n/**\n * @class Dom\n * @brief Dom class\n */\nmofron.Dom = function (_mofron$Base) {\n    _inherits(_class, _mofron$Base);\n\n    /**\n     * initialize member\n     *\n     * @param tag : (string) tag name\n     * @param cmp : (object) component object\n     */\n    function _class(tg, cmp) {\n        _classCallCheck(this, _class);\n\n        try {\n            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n            _this.name('Dom');\n\n            _this.m_classnm = new mofron.ClassName(_this);\n            _this.m_child = new Array();\n            _this.m_style = new mofron.Style(_this);\n            _this.m_attr = new mofron.Attr(_this);\n            _this.m_prop = new mofron.Prop(_this);\n            _this.m_cnflis = new Array();\n            _this.m_rawdom = null;\n\n            _this.prmOpt(tg, cmp);\n            if (null !== _this.param()) {\n                _this.tag(tg);\n                _this.component(cmp);\n            }\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n        return _this;\n    }\n\n    /**\n     * tag name setter / getter\n     *\n     * @param tg : (string) tag name (option)\n     * @return (string) tag name\n     */\n\n\n    _createClass(_class, [{\n        key: 'tag',\n        value: function tag(tg) {\n            try {\n                if (undefined === tg) {\n                    /* getter */\n                    return undefined === this.m_tag ? null : this.m_tag;\n                }\n                /* setter */\n                if ('string' !== typeof tg) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_tag = tg;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * component getter / setter\n         * \n         * @param cmp (object) mofron.Component\n         * @return (object) mofron.Component\n         */\n\n    }, {\n        key: 'component',\n        value: function component(cmp) {\n            try {\n                if (undefined === cmp) {\n                    /* getter */\n                    return undefined === this.m_comp ? null : this.m_comp;\n                }\n                /* setter */\n                if (false === mofron.func.isInclude(cmp, 'Component')) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_comp = cmp;\n\n                /* set component attribute */\n                if (true === mofron.debug) {\n                    var nm = cmp.name().toLowerCase();\n                    if ('Component' !== nm) {\n                        cmp.adom().attr({ 'component': 'mofron-comp-' + nm });\n                    }\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'child',\n        value: function child(chd) {\n            try {\n                if (undefined === chd) {\n                    /* getter */\n                    return this.m_child;\n                }\n                /* setter */\n                if ('object' !== (typeof chd === 'undefined' ? 'undefined' : _typeof(chd))) {\n                    throw new Error('invalid parameter');\n                }\n\n                if (undefined !== chd[0]) {\n                    for (var idx in chd) {\n                        this.addChild(chd[idx]);\n                    }\n                    return;\n                }\n                this.addChild(chd);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * add child adom\n         *\n         * @param chd : (object) child adom\n         */\n\n    }, {\n        key: 'addChild',\n        value: function addChild(chd, idx) {\n            try {\n                if (false === mofron.func.isInclude(chd, 'Dom')) {\n                    throw new Error('invalid parameter');\n                }\n                chd.parent(this);\n\n                if (undefined === idx || 0 === this.m_child.length) {\n                    this.m_child.push(chd);\n                } else {\n                    this.m_child.splice(idx, 0, chd);\n                }\n                this.value(null);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'updChild',\n        value: function updChild(chd, idx) {\n            try {\n                if ('number' !== typeof idx || undefined === this.child()[idx]) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_child[idx].destroy();\n                this.addChild(chd, idx);\n                if (true === mofron.func.isObject(this, 'Adom') && 1 === this.child().length) {\n                    this.component().target(chd);\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'delChild',\n        value: function delChild(idx) {\n            try {\n                if ('number' !== typeof idx || undefined === this.child()[idx]) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_child.splice(idx, 1);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'styleListener',\n        value: function styleListener(key, func, prm) {\n            try {\n                if (undefined === key) {\n                    /* getter */\n                    return undefined === this.m_style_lis ? [] : this.m_style_lis;\n                }\n                /* setter */\n                if (undefined === this.m_style_lis) {\n                    this.m_style_lis = {};\n                }\n                if ('string' !== typeof key || 'function' !== typeof func) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_style_lis[key] = [func, prm];\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * style setter / getter\n         *\n         * @param kv : (object) key-value object\n         * @return (string) : value of style\n         * @return (object) : style object\n         */\n\n    }, {\n        key: 'style',\n        value: function style(kv, los) {\n            try {\n                if (undefined === kv || 'string' === typeof kv) {\n                    /* getter */\n                    return this.m_style.get(kv);\n                }\n                /* setter */\n                if (true === los) {\n                    this.m_style.protect(true);\n                    this.m_style.set(kv);\n                    this.m_style.protect(false);\n                } else if ('object' === (typeof kv === 'undefined' ? 'undefined' : _typeof(kv))) {\n                    this.m_style.set(kv);\n                }\n\n                /* execute style listener */\n                var lisner = this.styleListener();\n                for (var kv_idx in kv) {\n                    for (var lis_idx in lisner) {\n                        if (kv_idx === lis_idx) {\n                            lisner[lis_idx][0](lisner[lis_idx][1]);\n                        }\n                    }\n                }\n\n                this.value(null);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * tag attribute setter / getter\n         *\n         * @param kv  : (object/string) key-value object / key of attribute\n         * @param val : (object) value of attribute\n         * @return\n         */\n\n    }, {\n        key: 'attr',\n        value: function attr(kv, val) {\n            try {\n                if (undefined === val && 'object' !== (typeof kv === 'undefined' ? 'undefined' : _typeof(kv))) {\n                    /* getter */\n                    return this.m_attr.get(kv);\n                }\n                /* setter */\n                if ('string' === typeof kv) {\n                    var set_obj = {};\n                    set_obj[kv] = val;\n                    this.m_attr.set(set_obj);\n                } else {\n                    this.m_attr.set(kv);\n                }\n\n                this.value(null);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * dom property setter / getter\n         * \n         * @param kv  : (object/string) key-value object / key of\n         * @param val : (object)  value of property\n         */\n\n    }, {\n        key: 'prop',\n        value: function prop(kv, val) {\n            try {\n                if (undefined === val && 'object' !== (typeof kv === 'undefined' ? 'undefined' : _typeof(kv))) {\n                    /* getter */\n                    return this.m_prop.get(kv);\n                }\n                /* setter */\n                var chgcnf = {};\n                for (var kv_idx in kv) {\n                    if (kv[kv_idx] !== this.prop(kv_idx)) {\n                        chgcnf[kv_idx] = kv[kv_idx];\n                    }\n                }\n\n                if ('string' === typeof kv) {\n                    var set_obj = {};\n                    set_obj[kv] = val;\n                    this.m_prop.set(set_obj);\n                } else {\n                    this.m_prop.set(kv);\n                }\n\n                //if (0 !== chgcnf.length) {\n                //    this.execConfListener ('prop', chgcnf);\n                //}\n                this.value(null);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * tag class name setter / getter\n         * \n         * @param name : (string) class name\n         */\n\n    }, {\n        key: 'className',\n        value: function className(name) {\n            try {\n                if (undefined === name) {\n                    /* getter */\n                    return this.m_classnm.get();\n                }\n                /* setter */\n                this.m_classnm.add(name);\n                //this.execConfListener('className', name);\n                this.value(null);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * tag contents text setter / getter\n         * \n         * @param cnt : (string) tag contents (option)\n         * @return (string) tag contents\n         */\n\n    }, {\n        key: 'text',\n        value: function text(txt) {\n            try {\n                if (undefined === txt) {\n                    /* getter */\n                    return undefined === this.m_text ? '' : this.m_text;\n                }\n                /* setter */\n                if ('string' !== typeof txt) {\n                    throw new Error('invalid parameter');\n                }\n\n                var chgcnf = null;\n                if (txt !== this.text()) {\n                    chgcnf = txt;\n                }\n                this.m_text = txt;\n                if (true === this.isPushed()) {\n                    this.getRawDom().innerHTML = txt;\n                }\n\n                //if (null !== chgcnf) {\n                //this.execConfListener ('text', txt);\n                //}\n                this.value(null);\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        //addConfListener (fnc, prm) {\n        //    try {\n        //        if ('function' !== typeof fnc) {\n        //            throw new Error('invalid parameter');\n        //        }\n        //        this.m_cnflis.push([fnc, prm]);\n        //    } catch (e) {\n        //        console.error(e.stack);\n        //        throw e;\n        //    }\n        //}\n        //\n        //execConfListener (type, prm) {\n        //    try {\n        //        for (var idx in this.m_cnflis) {\n        //            this.m_cnflis[idx][0](\n        //                type,\n        //                prm,\n        //                this.m_cnflis[idx][1]\n        //            );\n        //        }\n        //    } catch (e) {\n        //        console.error(e.stack);\n        //        throw e;\n        //    }\n        //}\n\n        /**\n         * dom string setter / getter\n         *\n         * @return (string) dom string\n         */\n\n    }, {\n        key: 'value',\n        value: function value(val) {\n            try {\n                if (undefined === val) {\n                    /* getter */\n                    if (undefined !== this.m_value && 'string' === typeof this.m_value) {\n                        return this.m_value;\n                    }\n\n                    var ret_val = '';\n                    ret_val += '<' + this.tag() + ' ';\n\n                    /* set id attribute */\n                    ret_val += 'id=\"' + this.getId() + '\" ';\n\n                    /* set dom config */\n                    var cnf_lst = [this.m_classnm, this.m_style, this.m_attr];\n                    var cnf_cnt = null;\n                    for (var idx in cnf_lst) {\n                        cnf_cnt = cnf_lst[idx].getString();\n                        if ('' !== cnf_cnt) {\n                            ret_val += cnf_cnt;\n                        }\n                    }\n\n                    /* close tag */\n                    ret_val += '>';\n\n                    /* set tag contents */\n                    ret_val += this.text();\n\n                    /* set child value */\n                    var child = this.child();\n                    for (var chd_idx in child) {\n                        ret_val += child[chd_idx].value();\n                    }\n\n                    if (false === this.isSimple()) {\n                        ret_val += '</' + this.tag() + '>';\n                    }\n\n                    /* set buff */\n                    this.value(ret_val);\n\n                    return ret_val;\n                }\n                /* setter */\n                if (null === val && null !== this.parent()) {\n                    this.parent().value(null);\n                } else if (null !== val && 'string' !== typeof val) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_value = val;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * draw dom to target dom\n         * \n         * @param tgt : (object) target dom\n         * @param upd : (boolean) update flag\n         */\n\n    }, {\n        key: 'pushDom',\n        value: function pushDom(tgt, upd) {\n            try {\n                var _upd = undefined === upd ? false : upd;\n                if ('boolean' !== typeof _upd) {\n                    throw new Error('invalid parameter');\n                }\n\n                if (false === _upd && true === this.isPushed()) {\n                    throw new Error('already pushed');\n                }\n\n                this.parent(tgt);\n\n                if (true === mofron.ssr) {\n                    return;\n                }\n\n                var tgt_dom = null === this.parent() ? document.body : this.parent().getRawDom();\n                if (false === _upd) {\n                    tgt_dom.insertAdjacentHTML('beforeend', this.value());\n                } else {\n                    tgt_dom.innerHTML = this.value();\n                }\n                this.setPushed();\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * get adom status\n         *\n         * @return (boolean) true : this adom had pushed\n         * @return (boolean) false : this adom had not pushed\n         */\n\n    }, {\n        key: 'isPushed',\n        value: function isPushed() {\n            try {\n                return null === this.m_rawdom ? false : true;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * update adom status\n         * \n         * @note update status also child adom\n         */\n\n    }, {\n        key: 'setPushed',\n        value: function setPushed() {\n            try {\n                /* set rawdom */\n                var tgt_pnt = this.parent();\n                while (tgt_pnt) {\n                    if (true === tgt_pnt.isSimple()) {\n                        tgt_pnt = tgt_pnt.parent();\n                    } else {\n                        break;\n                    }\n                }\n                if (null === tgt_pnt) {\n                    this.m_rawdom = document.querySelector('#' + this.getId());\n                } else {\n                    this.m_rawdom = tgt_pnt.getRawDom().querySelector('#' + this.getId());\n                }\n\n                if (null === this.m_rawdom) {\n                    throw new Error('could not find rawdom');\n                }\n\n                /* set property */\n                var prop = this.m_prop.get();\n                for (var idx in prop) {\n                    this.prop(idx, prop[idx]);\n                }\n\n                if (0 != this.m_child.length) {\n                    for (var chd_idx in this.m_child) {\n                        this.m_child[chd_idx].setPushed();\n                    }\n                }\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * check whether tag name is simple tag\n         *\n         * @return (boolean) true  : this adom is simple tag\n         * @return (boolean) false : this adom is not simple tag\n         */\n\n    }, {\n        key: 'isSimple',\n        value: function isSimple(flg) {\n            try {\n                if (undefined === flg) {\n                    /* getter */\n                    if (undefined === this.m_simple) {\n                        return 'br' == this.tag() || 'hr' == this.tag() || 'input' == this.tag() || 'img' == this.tag() ? true : false;\n                    } else {\n                        return this.m_simple;\n                    }\n                }\n                /* setter */\n                if ('boolean' !== typeof flg) {\n                    throw new Error('invalid parameter');\n                }\n                this.m_simple = flg;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * parent adom setter / getter\n         * \n         * @param pnt : (object) parent dom/adom object\n         * @return (object) parant dom/adom object\n         */\n\n    }, {\n        key: 'parent',\n        value: function parent(pnt) {\n            try {\n                if (undefined === pnt) {\n                    /* getter */\n                    return undefined === this.m_parent ? null : this.m_parent;\n                }\n                /* setter */\n                if (null !== pnt && false === mofron.func.isInclude(pnt, 'Dom')) {\n                    throw new Error('invalid parameter');\n                }\n                if (undefined !== this.m_parent) {\n                    this.destroy();\n                }\n                this.m_parent = pnt;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n\n        /**\n         * get pushed dom object from blowser\n         *\n         * @return (object) raw dom object\n         */\n\n    }, {\n        key: 'getRawDom',\n        value: function getRawDom() {\n            try {\n                if (false === this.isPushed()) {\n                    throw new Error('this dom is not pushed yet');\n                }\n                return this.m_rawdom;\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            try {\n                if (true === this.isPushed() && true === mofron.func.isObject(this, 'Dom')) {\n                    this.getRawDom().remove();\n                    this.m_rawdom = null;\n                }\n                //let chd = this.child();\n                //for (let cidx in chd) {\n                //    chd[cidx].destroy();\n                //}\n                //if ( (null !== this.parent()) &&\n                //     (true === mofron.func.isInclude(this.parent(), 'Dom')) ) {\n                //    var pnt_chd = this.parent().child();\n                //    for (var idx in pnt_chd) {\n                //        if (pnt_chd[idx].getId() === this.getId()) {\n                //            this.parent().delChild(parseInt(idx));\n                //            break;\n                //        }\n                //    }\n                //}\n            } catch (e) {\n                console.error(e.stack);\n                throw e;\n            }\n        }\n    }]);\n\n    return _class;\n}(mofron.Base);\n\n//# sourceURL=webpack:///./node_modules/mofron/src/util/dom/Dom.js?")},"./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };\n\nvar g;\n\n// This works in non-strict mode\ng = function () {\n\treturn this;\n}();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function("return this")() || (1, eval)("this");\n} catch (e) {\n\t// This works if the window reference is available\n\tif ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?')},"./src/js/conf/theme.js":
/*!******************************!*\
  !*** ./src/js/conf/theme.js ***!
  \******************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\n\n/**\n * @file theme.js\n * @brief app theme\n */\nvar mf = __webpack_require__(/*! mofron */ "./node_modules/mofron/index.js");\n\nmodule.exports = {\n    theme: function theme(thm) {\n        try {\n            // please define app theme here\n        } catch (e) {\n            console.error(e.stack);\n            throw e;\n        }\n    }\n};\n/* end of file */\n\n//# sourceURL=webpack:///./src/js/conf/theme.js?')},"./src/js/init/login.js":
/*!******************************!*\
  !*** ./src/js/init/login.js ***!
  \******************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\n\n/**\n * @file login.js\n * @brief login page initialization\n */\nvar mf = __webpack_require__(/*! mofron */ "./node_modules/mofron/index.js");\n__webpack_require__(/*! expose-loader?app!../conf/namesp.js */ "./node_modules/expose-loader/index.js?app!./src/js/conf/namesp.js-exposed");\n/* component */\nvar Login = __webpack_require__(/*! mofron-comp-login */ "./node_modules/mofron-comp-login/index.js");\n/* effect */\nvar Shadow = __webpack_require__(/*! mofron-effect-shadow */ "./node_modules/mofron-effect-shadow/index.js");\n\n/* app ctrl */\nvar theme = __webpack_require__(/*! ../conf/theme.js */ "./src/js/conf/theme.js");\n\n/**\n * page init function\n * \n * @param rt : root component\n */\nvar start = function start(rt) {\n    try {\n        // page init here\n        var login = new Login({\n            title: \'Dr.Pkt\',\n            authConf: new mf.Param(\'./src/php/api/auth/login.php\', function () {} //auth.login\n            )\n        });\n        login.header().execOption({\n            addEffect: new Shadow(20)\n        });\n        rt.addChild(login);\n    } catch (e) {\n        console.error(e.stack);\n        throw e;\n    }\n};\n\ntry {\n    theme.theme(app.root.theme());\n    start(app.root);\n    app.root.visible(true);\n} catch (e) {\n    console.error(e.stack);\n}\n/* end of file */\n\n//# sourceURL=webpack:///./src/js/init/login.js?')}});